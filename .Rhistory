noneonediff
noneonediff <- input.diff$meaninput[2] - input.diff$meaninput[1]
noneonediff
Figure.speaker.count <- ggplot(subset(speaker.type, Speaker %in% c("MOT", "FAT", "SIBLING", "Family.input") & audio_video == "video"),
aes(x=Speaker, y=n, color = Speaker)) +
stat_summary(fun.y = mean, geom = "point", aes(group = subj), shape = 1, size = 3, position = position_jitter(.1)) +
stat_summary(fun.data = "mean_cl_boot", colour = "red", shape = 17, size = 1) +
facet_wrap(~SibGroup, ncol=3) +
scale_x_discrete(limits = c("MOT", "FAT", "SIBLING", "Family.input"), labels = c("Mother", "Father", "Sibling", "Total input")) +
theme_bw(base_size = 15) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, vjust = 0.5))
Figure.speaker.count
library(tidyverse)
library(dplyr)
library(tibble)
library(lmerTest)
library(afex)
library(citr)
source("DataGathering.R")
knitr::opts_chunk$set(echo = TRUE)
sibnumber.model <- lmerTest::lmer(Log.Totalwords ~ Siblings6 + month + (1|subj), data=SiblingsData, REML=FALSE)
sibnumber.model <- lmerTest::lmer(Log.Totalwords ~ Siblings6 + month + (1|subj), data=SiblingsData, REML=FALSE)
sibnumber.model.null <- lmerTest::lmer(Log.Totalwords ~ month + (1|subj), data=SiblingsData, REML=FALSE)
sibnumber.model <- lmerTest::lmer(Log.Totalwords ~ Siblings6 + month + (1|subj), data=SiblingsData, REML=FALSE)
sibnumber.model.null <- lmerTest::lmer(Log.Totalwords ~ month + (1|subj), data=SiblingsData, REML=FALSE)
anova(sibnumber.model, sibnumber.model.null) # significant
speaker.type.model_siblings <- lmerTest::lmer(Log.n ~ Siblings6 + Speaker + (1|subj),
data=subset(speaker.type, audio_video == "video"), REML=FALSE)
speaker.type.model.null_siblings <- lmerTest::lmer(Log.n ~ Speaker + (1|subj),
data=subset(speaker.type, audio_video == "video"), REML=FALSE)
anova(speaker.type.model_siblings, speaker.type.model.null_siblings) # ns
speaker.type.MOT <- speaker.type %>% group_by(subj) %>%
filter(Speaker == "MOT" & audio_video == "video") %>%
mutate(MeanN = mean(n))  %>%
filter(month == 17)
wilcox.test(
x = subset(speaker.type.MOT, Siblings6 == "0")$MeanN
, y = subset(speaker.type.MOT, Siblings6 == "1")$MeanN
, paired = FALSE
) # NS
wilcox.test(
x = subset(speaker.type.MOT, Siblings6 == "2")$MeanN
, y = subset(speaker.type.MOT, Siblings6 == "1")$MeanN
, paired = FALSE
) # p<.01
wilcox.test(
x = subset(speaker.type.MOT, Siblings6 == "2")$MeanN
, y = subset(speaker.type.MOT, Siblings6 == "3")$MeanN
, paired = FALSE
) # NS
knitr::opts_chunk$set(echo = TRUE)
speaker.type.model_siblings <- lmerTest::lmer(Log.n ~ Siblings6 + (1|subj),
data=subset(speaker.type, audio_video == "video" & Speaker == "MOT"), REML=FALSE)
speaker.type.model.null_siblings <- lmerTest::lmer(Log.n ~ (1|subj),
data=subset(speaker.type, audio_video == "video" & Speaker == "MOT"), REML=FALSE)
anova(speaker.type.model_siblings, speaker.type.model.null_siblings) # ns
View(SiblingsData)
library(papaja)
library(tidyverse)
library(dplyr)
library(tibble)
library(lmerTest)
library(afex)
#library(citr)
library(feather)
source("DataGathering.R")
source("Tables.R")
stat_sum_df <- function(fun, geom="crossbar", ...) {
stat_summary(fun.data = fun, colour = "red", geom = geom, width = 0.2, ...)
}
```{r analysis-preferences}
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
View(demographics)
View(CDI)
View(SiblingsData)
View(speaker.type)
PVT <- read_csv("Data/ParentPVT.csv") %>%
mutate(subj = factor(subj)) %>%
rename(PVTscore = uncorrected_standard_score) %>%
select(-ed_pvt)
View(PVT)
CDI <- read_csv("Data/CDI.csv") %>%
mutate(subj = factor(subj)) %>%
rename(Total.words = CDI_TotalProd,
month = Month) %>%
mutate(Log.Totalwords = log(Total.words+1),
month = as.numeric(month)) %>%
select(subj, month, Total.words, Log.Totalwords)
View(CDI)
chidata <- read_csv("Data/all_basiclevel_randsubj.csv") %>%   # Read in basic levels data and then join with CDI data to create a dataset of infant production
filter(speaker == 'CHI') %>%
dplyr::select(
basic_level,
audio_video,
subj,
month) %>%
mutate(basic_level = str_to_lower(basic_level),
subj = factor(subj),
month = as.numeric(month))
View(chidata)
CHIdata_tokens_video <- chidata %>%
filter(audio_video == "video") %>%
group_by(subj, month) %>%
tally() %>%
rename("tokens_video" = "n")
CHIdata_types_video <- chidata %>%
filter(audio_video == "video") %>%
group_by(subj, month) %>%
summarise(types_video = n_distinct(basic_level))
CHIdata_tokens_audio <- chidata %>%
filter(audio_video == "audio") %>%
group_by(subj, month) %>%
tally() %>%
rename("tokens_audio" = "n")
CHIdata_types_audio <- chidata %>%
filter(audio_video == "audio") %>%
group_by(subj, month) %>%
summarise(types_audio = n_distinct(basic_level))
ProductionData <- CDI %>%
left_join(CHIdata_tokens_video) %>%
left_join(CHIdata_types_video) %>%
left_join(CHIdata_tokens_audio) %>%
left_join(CHIdata_types_audio) %>%
mutate(tokens_video = ifelse(month < 18 & is.na(tokens_video), 0, tokens_video),
types_video = ifelse(month < 18 & is.na(types_video), 0, types_video),
tokens_audio = ifelse(month < 18 & is.na(tokens_audio), 0, tokens_audio),
types_audio = ifelse(month < 18 & is.na(types_audio), 0, types_audio))
View(ProductionData)
demographics <- read_csv("Data/demo_deid_cleaned.csv") %>%
mutate(subj = factor(subj)) %>%
dplyr::select(
subj,
sex,
maternal_education_18mos,
#maternal_employment_18mos,
#maternal_employment_hours_18mos,
#paternal_employment_18mos,
#paternal_employment_hours_18mos,
children_in_household_18mos_staff,
children_in_household_6mos_staff
) %>%
dplyr::rename(MOTedu = maternal_education_18mos  ## rename columns
#MOTwork = maternal_employment_18mos,
#MOTworkhours = maternal_employment_hours_18mos,
#FATwork = paternal_employment_18mos,
#FATworkhours = paternal_employment_hours_18mos
) %>%
mutate(MOTedu = factor(MOTedu),  # rename variables according to key in shared folder
MOTedu = fct_recode(MOTedu,
"High School" = "E",
"Some college" = "H",
"Assoc Degree" = "I",
"Bachelors Degree" = "J",
"Masters Degree" = "K",
"Doctorate" = "L"),
# MOTwork = ifelse(MOTwork %in% c("H","I"),"Other", MOTwork),       # Three mothers not classed as working FT, PT or Home; class as 'Other' or PT, as relevant
# MOTwork = ifelse(MOTwork == "B_E", "B", MOTwork),
# MOTwork = factor(MOTwork),
# MOTwork = fct_recode(MOTwork,
#                      "Full-time" = "A",
#                      "Part-time" = "B",
#                      "Home" = "C"),
# FATwork = ifelse(FATwork !="A" & FATwork !="B" & FATwork != "C", "Other",  # Recode fathers' work status so that fathers who don't work FT, PT,
#             FATwork),                                                      # or stay home (e.g. full-time students) are listed as 'other'
# FATwork = factor(FATwork),
# FATwork = fct_recode(FATwork,
#                      "Full-time" = "A",
#                      "Home" = "C"),
Siblings18 = children_in_household_18mos_staff - 1,   # new variable for sibling number at 18 months
Siblings6 = children_in_household_6mos_staff - 1,      # new variable for sibling number at 6 months
SibsYN = ifelse(Siblings6 == 0, "N", "Y"),             # binomial variable for slibling status (Y = siblings, N = No siblings)
SibGroup = factor(Siblings6),                          # new variable for sibling group, 0, 1, 2+ siblings
SibGroup = fct_recode(SibGroup,
"None" = "0",
"One" = "1",
"2+" = "2",
"2+" = "3",
"2+" = "4"),
SibGroup18 = factor(Siblings18),                          # new variable for sibling group, 0, 1, 2+ siblings
SibGroup18 = fct_recode(SibGroup18,
"None" = "0",
"One" = "1",
"2+" = "2",
"2+" = "3",
"2+" = "4"),
# SibsDiscrete = factor(Siblings),                       # discrete variable for sibling number at 6 months
# SibsDiscrete = fct_recode(SibsDiscrete,
#                       "None" = "0",
#                       "One" = "1",
#                       "Two" = "2",
#                       "Three" = "3",
#                       "Four" = "4"),
MOTedulevel = fct_recode(MOTedu,
"1" = "High School",
"2" = "Some college",
"3" = "Assoc Degree",
"4" = "Bachelors Degree",
"5" = "Masters Degree",
"6" = "Doctorate"),
MOTedulevel = as.numeric(MOTedulevel)) %>%
dplyr::select(-children_in_household_6mos_staff, -children_in_household_18mos_staff) %>%
left_join(PVT)   # merge with PVT data
View(demographics)
SiblingsData <- demographics %>%
left_join(ProductionData) %>%
dplyr::select(                                      # re-order columns
subj,
month,
sex,
#MOTedu,
MOTedulevel,
age_mom,
PVTscore,
#MOTwork,
#MOTworkhours,
#FATwork,
#FATworkhours,
SibsYN,
Siblings6,
Siblings18,
SibGroup,
SibGroup18,
#SibsDiscrete,
Total.words,
Log.Totalwords,
tokens_video,
types_video,
tokens_audio,
types_audio)  %>%
mutate(Log.tokens_video = log(tokens_video+1),
Log.types_video = log(types_video+1),
Log.tokens_audio = log(tokens_audio+1),
Log.types_audio = log(types_audio+1))
View(SiblingsData)
source("Demographics.R")
sibsdata <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
filter(#audio_video =='video',   # Only use video data
speaker != 'CHI') %>%    # remove infant productions
dplyr::select(
audio_video,
utterance_type,
speaker,
object_present,
basic_level,
subj,
month) %>%
mutate(basic_level = str_to_lower(basic_level),
speaker = factor(speaker),
speaker = fct_collapse(speaker,
"SIBLING" = c("BRO", "BR1", "BR2", "SIS", "SI1", "SI2")),  # rename speakers
subj = factor(subj))
View(sibsdata)
sibsdata <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
filter(#audio_video =='video',   # Only use video data
speaker != 'CHI') %>%    # remove infant productions
dplyr::select(
audio_video,
utterance_type,
speaker,
object_present,
basic_level,
subj,
month) %>%
mutate(basic_level = str_to_lower(basic_level),
speaker = factor(speaker),
speaker = fct_collapse(speaker,
"SIBLING" = c("BRO", "BR1", "BR2", "SIS", "SI1", "SI2")),  # rename speakers
subj = factor(subj),
month = as.numeric(month))
View(sibsdata)
wordlist <- read_csv("Data/in_cdi_Wordlist.csv") # Read in CDI wordlist that matches sibsdata$basic_level with words on the CDI
utterance.type.n <- sibsdata %>%
filter(speaker %in% c("MOT", "FAT", "SIBLING"))  %>%    # Remove other speakers from data
filter(utterance_type %in%
c("d", "i", "n", "q", "r", "s", "u"))  %>%
group_by(subj, month, utterance_type, audio_video) %>%
tally() %>%
spread(utterance_type, n) %>%
#spread(audio_video, n) %>%
ungroup() %>%
replace(is.na(.), 0)
utterance.type.PC <- utterance.type.n %>%
mutate(Total.input = (d + i + n + q + r + s + u),         # create % of each utterance type
PCd = d/Total.input,
PCi = i/Total.input,
PCn = n/Total.input,
PCq = q/Total.input,
PCr = r/Total.input,
PCs = s/Total.input,
PCu = u/Total.input) %>%
dplyr::select(subj, month, audio_video, PCd,PCi, PCn, PCq, PCr, PCs, PCu) %>%
gather(`PCd`,`PCi`, `PCn`, `PCq`, `PCr`, `PCs`, `PCu`,
key = "TypePC",
value = "PC") %>%
dplyr::select(subj, month, audio_video, TypePC, PC) %>%  # Remove unnecessary columns
mutate(TypePC = factor(TypePC),
TypePC = fct_recode(TypePC,
"d" = "PCd",
"i" = "PCi",
"n" = "PCn",
"q" = "PCq",
"r" = "PCr",
"s" = "PCs",
"u" = "PCu")) %>%
rename(Type = TypePC) %>%
left_join(demographics)
utterance.type <- utterance.type.n %>%
gather(`d`,`i`, `n`, `q`, `r`, `s`, `u`,
key = "Type",
value = "n") %>%
mutate(Type = factor(Type)) %>%
dplyr::select(subj, month, audio_video, Type, n) %>%
left_join(utterance.type.PC) %>%
left_join(demographics) %>%      # Combine with demographics spreadsheet
mutate(Log.n = log(n+1),
# Add a column to show which factors represent joint engagement (R, S, Q)
JE = ifelse((Type=='r'| Type=='s' | Type=='q'), T, F))
View(utterance.type)
object.presence <- sibsdata %>%
filter(speaker %in% c("MOT", "FAT", "SIBLING"))  %>%    # Remove other speakers from data
filter(object_present %in%
c("y", "n")) %>%
group_by(subj, month, audio_video, object_present) %>%
tally() %>%
spread(object_present, n) %>%
replace(is.na(.), 0) %>%
ungroup() %>%
mutate(Total = n + y,
PC = y/Total) %>%
dplyr::select(subj, month, audio_video, y, PC) %>%
rename(n = y) %>%
left_join(demographics) %>%
mutate(Log.n = log(n+1))
speaker.type.n <- sibsdata %>%
group_by(subj, month, audio_video, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
rowwise() %>%
mutate(All.speakers = sum(c_across(ADM:UNC))) %>%  # not including unknown speakers from audio data
ungroup() %>%
mutate(Family.input = (MOT + FAT + SIBLING)) %>%
dplyr::select(subj, month, audio_video, MOT, FAT, SIBLING, Family.input, All.speakers)
speaker.type <- speaker.type.n %>%
gather(`MOT`,`FAT`, `SIBLING`, Family.input,
key = "Speaker",
value = "n") %>%
left_join(demographics) %>%
mutate(Log.n = log(n+1))
View(object.presence)
View(speaker.type)
library(papaja)
library(tidyverse)
library(dplyr)
library(tibble)
library(lmerTest)
library(afex)
#library(citr)
library(feather)
source("DataGathering.R")
source("Tables.R")
stat_sum_df <- function(fun, geom="crossbar", ...) {
stat_summary(fun.data = fun, colour = "red", geom = geom, width = 0.2, ...)
}
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
sibnums <- demographics %>% summarise(minsibs = min(Siblings6),
maxsibs = max(Siblings6))
sibage <- sib.ages %>% filter(SibsYN == "Y") %>% summarise(meandays = mean(age.diff.d),
mediandays = median(age.diff.d),
sddays = sd(age.diff.d),
maxdays = max(age.diff.d),
mindays = min(age.diff.d))
age.diff.inyears <- sibage$mediandays/365
minsib <- sibage$mindays/365
maxsib <- sibage$maxdays/365
firstword <- CDI %>% group_by(subj) %>%
filter(Total.words > 0) %>%
summarise(firstword = min(month)) %>%
ungroup() %>%
mutate(firstword = as.numeric(firstword)) %>%
summarise(meanfirstword = mean(firstword),
sdfirstword = sd(firstword))
other.speaker.data <-
speaker.type.n %>%
mutate(other.speakers = All.speakers - Family.input,
prop.other = other.speakers/All.speakers) %>%
summarise(PC.other.m = mean(prop.other)*100,
PC.other.sd = sd(prop.other)*100)
nowords <- SiblingsData %>% filter(month == 18 & Total.words == 0) %>% tally()
Nwords <- SiblingsData %>% filter(month == 18) %>% summarise(meanwords = mean(Total.words, na.rm=T),
sdwords = sd(Total.words, na.rm=T),
mdnwords = median(Total.words, na.rm=T))
Nsibs <- SiblingsData %>% filter(month == 18) %>% summarise(meansibs = mean(Siblings6),
sdsibs = sd(Siblings6),
mdnsibs = median(Siblings6))
CDI %>% #filter(month == 18) %>%
group_by(month) %>%
mutate(outlier_cutoff3sd = 3*sd(Total.words, na.rm=T),
mean_month = mean(Total.words, na.rm=T),
outlier = (Total.words >
(mean(Total.words, na.rm=T) +
3*(sd(Total.words, na.rm=T))) |
Total.words <
(mean(Total.words, na.rm=T) -
3*(sd(Total.words, na.rm=T))))) %>%
filter(outlier == TRUE) %>%
#filter(month>9)# this doesn't work bc month is a character but should be a number
filter(!month %in% c("06","07","08","09"))
# In overall vocabulary development
CDI %>% #filter(month == 18) %>%
group_by(month) %>%
mutate(outlier_cutoff3sd = 3*sd(Total.words, na.rm=T),
mean_month = mean(Total.words, na.rm=T),
outlier = (Total.words >
(mean(Total.words, na.rm=T) +
3*(sd(Total.words, na.rm=T))) |
Total.words <
(mean(Total.words, na.rm=T) -
3*(sd(Total.words, na.rm=T))))) %>%
filter(outlier == TRUE) %>%
#filter(month>9)# this doesn't work bc month is a character but should be a number
filter(!month %in% c("06","07","08","09"))
# month 10: 521, 749, 342
# month 11: 521, 342
# month 13: 794
# month 14: 794
# month 15: 794
# month 16: 794
# month 17: 794
# month 18: 794
## Remove 794 from analysis
SiblingsData <- SiblingsData %>% filter(subj != 794 & !month %in% c("06", "07", "08", "09"))
CDI <- CDI %>% filter(subj != 794)
speaker.type <- speaker.type %>% filter(subj != 794 & !month %in% c("06", "07", "08", "09"))
object.presence <- object.presence %>% filter(subj != 794 & !month %in% c("06", "07", "08", "09"))
in.cdi <- in.cdi %>% filter(subj != 794 & !month %in% c("06", "07", "08", "09"))
utterance.type.PC <- utterance.type.PC %>% filter(subj != 794 & !month %in% c("06", "07", "08", "09"))
females <- SiblingsData %>% filter(month == 18 & sex == "F") %>% tally()
source("Figures.R")
sibsYN.model <- lmerTest::lmer(Log.Totalwords ~ SibsYN + month + (1|subj), data=SiblingsData, REML=FALSE)
sibsYN.model.null <- lmerTest::lmer(Log.Totalwords ~ month + (1|subj), data=SiblingsData, REML=FALSE)
sibsYN_anova <- anova(sibsYN.model, sibsYN.model.null)
sibsYN_anova
sibgroup.model <- lmerTest::lmer(Log.Totalwords ~ SibGroup + month + (1|subj), data=SiblingsData, REML=FALSE)
sibgroup.model.null <- lmerTest::lmer(Log.Totalwords ~ month + (1|subj), data=SiblingsData, REML=FALSE)
sibgroup_anova <- anova(sibgroup.model, sibgroup.model.null)
sibgroup_anova
sibnumber.model <- lmerTest::lmer(Log.Totalwords ~ Siblings6 + month + (1|subj), data=SiblingsData, REML=FALSE)
library(papaja)
library(tidyverse)
library(dplyr)
library(tibble)
library(lmerTest)
library(afex)
#library(citr)
library(feather)
source("DataGathering.R")
source("Tables.R")
# remove one of the twins from each dataset
demographics <- demographics %>% filter(subj != 351)
SiblingsData <- SiblingsData %>% %>% filter(subj != 351)
demographics <- demographics %>% filter(subj != 351)
SiblingsData <- SiblingsData %>% filter(subj != 351)
CDI <- CDI %>% filter(subj != 351)
speaker.type <- speaker.type %>% filter(subj != 351)
object.presence <- object.presence %>% filter(subj != 351)
stat_sum_df <- function(fun, geom="crossbar", ...) {
stat_summary(fun.data = fun, colour = "red", geom = geom, width = 0.2, ...)
}
sibnums <- demographics %>% summarise(minsibs = min(Siblings6),
maxsibs = max(Siblings6))
sibnums
sibage <- sib.ages %>% filter(SibsYN == "Y") %>% summarise(meandays = mean(age.diff.d),
mediandays = median(age.diff.d),
sddays = sd(age.diff.d),
maxdays = max(age.diff.d),
mindays = min(age.diff.d))
sibage
View(sib.ages)
sib.ages <- sib.ages %>% filter(subj != 351)
sibage <- sib.ages %>% filter(SibsYN == "Y") %>% summarise(meandays = mean(age.diff.d),
mediandays = median(age.diff.d),
sddays = sd(age.diff.d),
maxdays = max(age.diff.d),
mindays = min(age.diff.d))
sibage
View(CDI)
missing_CDI <- CDI %>% group_by(subj) %>% filter(is.na(Total.words))
missing_CDI
missing_CDI <- CDI %>% group_by(subj) %>% filter(is.na(Total.words)) %>% tally()
missing_CDI
n_missing <- missing_CDI %>% tally()
n_missing
total_missing <- missing_CDI %>% summarise(sum(n))
total_missing
missing_CDI
high_missing <- missing_CDI %>% filter(max(n))
high_missing <- missing_CDI %>% filter(n == max(n))
high_missing
high_missing <- missing_CDI %>% filter(n == max(n)) %>% tally()
high_missing
CDI %>% tally()
13*43
low_missing <- missing_CDI %>% filter(n == min(n))
low_missing
low_missing <- missing_CDI %>% filter(n == min(n)) %>% tally()
