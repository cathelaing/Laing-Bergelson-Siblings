<<<<<<< HEAD
colour = ifelse(book == "2" & word == "coat" & LR == "L", 1, colour),
colour = ifelse(book == "2" & word == "coat" & LR == "R", -1, colour),
colour = ifelse(book == "2r" & word == "clock" & LR == "L", -1, colour),
colour = ifelse(book == "2r" & word == "clock" & LR == "R", 1, colour),
colour = ifelse(book == "2r" & word == "glasses" & LR == "L", 1, colour),
colour = ifelse(book == "2r" & word == "glasses" & LR == "R", -1, colour),
colour = ifelse(book == "2r" & word == "bowl" & LR == "L", 1, colour),
colour = ifelse(book == "2r" & word == "bowl" & LR == "R", -1, colour),
colour = ifelse(book == "2r" & word == "coat" & LR == "L", -1, colour),
colour = ifelse(book == "2r" & word == "coat" & LR == "R", 1, colour),
test = ifelse(word == tolower(col1), T, F),
size = ifelse(is.na(colour) & test == T & word == col1 & LR == "L", 1, NA),
size = ifelse(is.na(colour) & test == T & word == col2 & LR == "R", 1, size),
size = ifelse(is.na(colour) & test == T & word != col1 & LR == "L", -1, size),
size = ifelse(is.na(colour) & test == T & word != col2 & LR == "R", -1, size))
data_arr_book2 <- data_arr %>%
filter(book %in% c("2", "2r")) %>%
mutate(Word = tolower(Word)) %>%
separate(Word, c("image_L", "image_R"), "_") %>%
mutate(item=pmap_chr(list(image_L, image_R), ~paste(sort(c(...)), collapse = "_")))  %>%
pivot_longer(
cols = starts_with("image"),
names_to = "LR",
names_prefix = "image_",
values_to = "word",
values_drop_na = TRUE
) %>%
separate(stimuli, c("col1", "col2"), " ") %>%
mutate(colour = ifelse(book == "2" & word == "clock" & LR == "L", 1, NA),
colour = ifelse(book == "2" & word == "clock" & LR == "R", -1, colour),
colour = ifelse(book == "2" & word == "glasses" & LR == "L", -1, colour),
colour = ifelse(book == "2" & word == "glasses" & LR == "R", 1, colour),
colour = ifelse(book == "2" & word == "bowl" & LR == "L", -1, colour),
colour = ifelse(book == "2" & word == "bowl" & LR == "R", 1, colour),
colour = ifelse(book == "2" & word == "coat" & LR == "L", 1, colour),
colour = ifelse(book == "2" & word == "coat" & LR == "R", -1, colour),
colour = ifelse(book == "2r" & word == "clock" & LR == "L", -1, colour),
colour = ifelse(book == "2r" & word == "clock" & LR == "R", 1, colour),
colour = ifelse(book == "2r" & word == "glasses" & LR == "L", 1, colour),
colour = ifelse(book == "2r" & word == "glasses" & LR == "R", -1, colour),
colour = ifelse(book == "2r" & word == "bowl" & LR == "L", 1, colour),
colour = ifelse(book == "2r" & word == "bowl" & LR == "R", -1, colour),
colour = ifelse(book == "2r" & word == "coat" & LR == "L", -1, colour),
colour = ifelse(book == "2r" & word == "coat" & LR == "R", 1, colour),
test = ifelse(word == tolower(col1), T, F),
size = ifelse(is.na(colour) & test == T & word == col1 & LR == "L", 1, NA),
size = ifelse(is.na(colour) & test == T & word == col2 & LR == "R", 1, size),
size = ifelse(is.na(colour) & test == T & word != col1 & LR == "L", -1, size),
size = ifelse(is.na(colour) & test == T & word != col2 & LR == "R", -1, size)) %>%
dplyr::select(-test, -col1, -col2) %>%
mutate(paradigm = "3")
all_data <- rbind(data_arr_poster, data_arr_book1, data_arr_book2) %>%
write_csv("data_arranged_all_levels.csv")
stimuli <- read_csv("stimuli.csv")
large_items <- c("tree", "pig", "duck", "sheep",
"bed", "dog", "elephant", "lion",
"car", "tractor", "cow", "horse",
"bus", "monkey", "chair", "bike",
"tiger", "bath")
data_arr <- stimuli
data_arr$Word <- gsub("\\ ", "_", data_arr$stimuli)
data_arr_book1 <- data_arr %>%
filter(book %in% c("1a", "1ar", "1b", "1br", "1c", "1cr", "1d", "1dr")) %>%
mutate(Word = tolower(Word)) %>%
separate(Word, c("image_L", "image_R"), "_") %>%
mutate(item=pmap_chr(list(image_L, image_R), ~paste(sort(c(...)), collapse = "_")))  %>%
pivot_longer(
cols = starts_with("image"),
names_to = "LR",
names_prefix = "image_",
values_to = "word",
values_drop_na = TRUE
) %>%
separate(stimuli, c("col1", "col2"), " ") %>%
mutate(test = ifelse(word == tolower(col1), T, F)) %>%
mutate(size = ifelse(test == T & word == col1, 1, NA),
size = ifelse(test == T & word != col1, -1, size),
size = ifelse(test == F & word == col2, 1, size),
size = ifelse(test == F & word != col2, -1, size)) %>%
mutate(RWsize = ifelse(word %in% large_items, "L", "S"),
congruence = ifelse((RWsize == "L" & size == -1) | (RWsize == "S" & size == 1) , 1, -1)) %>%
dplyr::select(-test, -col1, -col2) %>%
mutate(paradigm = "2")
data_arr_poster <- data_arr %>%
filter(book %in% c("p1", "p2", "p3", "p4")) %>%
mutate(Word = tolower(Word))  %>%
separate(Word, c("image_1", "image_2"), "_") %>%
mutate(item=pmap_chr(list(image_1, image_2), ~paste(sort(c(...)), collapse = "_")))  %>%
pivot_longer(
cols = starts_with("image"),
names_to = "LR",
names_prefix = "image_",
values_to = "word",
values_drop_na = TRUE
) %>%
separate(stimuli, c("col1", "col2"), " ") %>%
mutate(test = ifelse(word == tolower(col1), T, F)) %>%
mutate(size = ifelse(test == T & word == col1, 1, NA),
size = ifelse(test == T & word != col1, -1, size),
size = ifelse(test == F & word == col2, 1, size),
size = ifelse(test == F & word != col2, -1, size)) %>%
mutate(RWsize = ifelse(word %in% large_items, "L", "S"),
congruence = ifelse((RWsize == "L" & size == -1) | (RWsize == "S" & size == 1) , 1, -1))  %>%
dplyr::select(-test, -col1, -col2) %>%
mutate(paradigm = "1",
LR = NA)
data_arr_book2 <- data_arr %>%
filter(book %in% c("2", "2r")) %>%
mutate(Word = tolower(Word)) %>%
separate(Word, c("image_L", "image_R"), "_") %>%
mutate(item=pmap_chr(list(image_L, image_R), ~paste(sort(c(...)), collapse = "_")))  %>%
pivot_longer(
cols = starts_with("image"),
names_to = "LR",
names_prefix = "image_",
values_to = "word",
values_drop_na = TRUE
) %>%
separate(stimuli, c("col1", "col2"), " ") %>%
mutate(colour = ifelse(book == "2" & word == "clock" & LR == "L", 1, NA),
colour = ifelse(book == "2" & word == "clock" & LR == "R", -1, colour),
colour = ifelse(book == "2" & word == "glasses" & LR == "L", -1, colour),
colour = ifelse(book == "2" & word == "glasses" & LR == "R", 1, colour),
colour = ifelse(book == "2" & word == "bowl" & LR == "L", -1, colour),
colour = ifelse(book == "2" & word == "bowl" & LR == "R", 1, colour),
colour = ifelse(book == "2" & word == "coat" & LR == "L", 1, colour),
colour = ifelse(book == "2" & word == "coat" & LR == "R", -1, colour),
colour = ifelse(book == "2r" & word == "clock" & LR == "L", -1, colour),
colour = ifelse(book == "2r" & word == "clock" & LR == "R", 1, colour),
colour = ifelse(book == "2r" & word == "glasses" & LR == "L", 1, colour),
colour = ifelse(book == "2r" & word == "glasses" & LR == "R", -1, colour),
colour = ifelse(book == "2r" & word == "bowl" & LR == "L", 1, colour),
colour = ifelse(book == "2r" & word == "bowl" & LR == "R", -1, colour),
colour = ifelse(book == "2r" & word == "coat" & LR == "L", -1, colour),
colour = ifelse(book == "2r" & word == "coat" & LR == "R", 1, colour),
test = ifelse(word == tolower(col1), T, F),
size = ifelse(is.na(colour) & test == T & word == col1 & LR == "L", 1, NA),
size = ifelse(is.na(colour) & test == T & word == col2 & LR == "R", 1, size),
size = ifelse(is.na(colour) & test == T & word != col1 & LR == "L", -1, size),
size = ifelse(is.na(colour) & test == T & word != col2 & LR == "R", -1, size)) %>%
dplyr::select(-test, -col1, -col2) %>%
mutate(paradigm = "3")
data_arr_book1 <- data_arr %>%
filter(book %in% c("1a", "1ar", "1b", "1br", "1c", "1cr", "1d", "1dr")) %>%
mutate(Word = tolower(Word)) %>%
separate(Word, c("image_L", "image_R"), "_") %>%
mutate(item=pmap_chr(list(image_L, image_R), ~paste(sort(c(...)), collapse = "_")))  %>%
pivot_longer(
cols = starts_with("image"),
names_to = "LR",
names_prefix = "image_",
values_to = "word",
values_drop_na = TRUE
) %>%
separate(stimuli, c("col1", "col2"), " ") %>%
mutate(test = ifelse(word == tolower(col1), T, F)) %>%
mutate(size = ifelse(test == T & word == col1, 1, NA),
size = ifelse(test == T & word != col1, -1, size),
size = ifelse(test == F & word == col2, 1, size),
size = ifelse(test == F & word != col2, -1, size)) %>%
mutate(RWsize = ifelse(word %in% large_items, "L", "S"),
congruence = ifelse((RWsize == "L" & size == -1) | (RWsize == "S" & size == 1) , 1, -1)) %>%
dplyr::select(-test, -col1, -col2) %>%
mutate(paradigm = "2",
colour = NA)
data_arr_poster <- data_arr %>%
filter(book %in% c("p1", "p2", "p3", "p4")) %>%
mutate(Word = tolower(Word))  %>%
separate(Word, c("image_1", "image_2"), "_") %>%
mutate(item=pmap_chr(list(image_1, image_2), ~paste(sort(c(...)), collapse = "_")))  %>%
pivot_longer(
cols = starts_with("image"),
names_to = "LR",
names_prefix = "image_",
values_to = "word",
values_drop_na = TRUE
) %>%
separate(stimuli, c("col1", "col2"), " ") %>%
mutate(test = ifelse(word == tolower(col1), T, F)) %>%
mutate(size = ifelse(test == T & word == col1, 1, NA),
size = ifelse(test == T & word != col1, -1, size),
size = ifelse(test == F & word == col2, 1, size),
size = ifelse(test == F & word != col2, -1, size)) %>%
mutate(RWsize = ifelse(word %in% large_items, "L", "S"),
congruence = ifelse((RWsize == "L" & size == -1) | (RWsize == "S" & size == 1) , 1, -1))  %>%
dplyr::select(-test, -col1, -col2) %>%
mutate(paradigm = "1",
LR = NA,
colour = NA)
data_arr_book2 <- data_arr %>%
filter(book %in% c("2", "2r")) %>%
mutate(Word = tolower(Word)) %>%
separate(Word, c("image_L", "image_R"), "_") %>%
mutate(item=pmap_chr(list(image_L, image_R), ~paste(sort(c(...)), collapse = "_")))  %>%
pivot_longer(
cols = starts_with("image"),
names_to = "LR",
names_prefix = "image_",
values_to = "word",
values_drop_na = TRUE
) %>%
separate(stimuli, c("col1", "col2"), " ") %>%
mutate(colour = ifelse(book == "2" & word == "clock" & LR == "L", 1, NA),
colour = ifelse(book == "2" & word == "clock" & LR == "R", -1, colour),
colour = ifelse(book == "2" & word == "glasses" & LR == "L", -1, colour),
colour = ifelse(book == "2" & word == "glasses" & LR == "R", 1, colour),
colour = ifelse(book == "2" & word == "bowl" & LR == "L", -1, colour),
colour = ifelse(book == "2" & word == "bowl" & LR == "R", 1, colour),
colour = ifelse(book == "2" & word == "coat" & LR == "L", 1, colour),
colour = ifelse(book == "2" & word == "coat" & LR == "R", -1, colour),
colour = ifelse(book == "2r" & word == "clock" & LR == "L", -1, colour),
colour = ifelse(book == "2r" & word == "clock" & LR == "R", 1, colour),
colour = ifelse(book == "2r" & word == "glasses" & LR == "L", 1, colour),
colour = ifelse(book == "2r" & word == "glasses" & LR == "R", -1, colour),
colour = ifelse(book == "2r" & word == "bowl" & LR == "L", 1, colour),
colour = ifelse(book == "2r" & word == "bowl" & LR == "R", -1, colour),
colour = ifelse(book == "2r" & word == "coat" & LR == "L", -1, colour),
colour = ifelse(book == "2r" & word == "coat" & LR == "R", 1, colour),
test = ifelse(word == tolower(col1), T, F),
size = ifelse(is.na(colour) & test == T & word == col1 & LR == "L", 1, NA),
size = ifelse(is.na(colour) & test == T & word == col2 & LR == "R", 1, size),
size = ifelse(is.na(colour) & test == T & word != col1 & LR == "L", -1, size),
size = ifelse(is.na(colour) & test == T & word != col2 & LR == "R", -1, size)) %>%
dplyr::select(-test, -col1, -col2) %>%
mutate(paradigm = "3")
all_data <- rbind(data_arr_poster, data_arr_book1, data_arr_book2) %>%
write_csv("data_arranged_all_levels.csv")
View(data_arr_book1)
View(data_arr_poster)
data_arr_book2 <- data_arr %>%
filter(book %in% c("2", "2r")) %>%
mutate(Word = tolower(Word)) %>%
separate(Word, c("image_L", "image_R"), "_") %>%
mutate(item=pmap_chr(list(image_L, image_R), ~paste(sort(c(...)), collapse = "_")))  %>%
pivot_longer(
cols = starts_with("image"),
names_to = "LR",
names_prefix = "image_",
values_to = "word",
values_drop_na = TRUE
) %>%
separate(stimuli, c("col1", "col2"), " ") %>%
mutate(colour = ifelse(book == "2" & word == "clock" & LR == "L", 1, NA),
colour = ifelse(book == "2" & word == "clock" & LR == "R", -1, colour),
colour = ifelse(book == "2" & word == "glasses" & LR == "L", -1, colour),
colour = ifelse(book == "2" & word == "glasses" & LR == "R", 1, colour),
colour = ifelse(book == "2" & word == "bowl" & LR == "L", -1, colour),
colour = ifelse(book == "2" & word == "bowl" & LR == "R", 1, colour),
colour = ifelse(book == "2" & word == "coat" & LR == "L", 1, colour),
colour = ifelse(book == "2" & word == "coat" & LR == "R", -1, colour),
colour = ifelse(book == "2r" & word == "clock" & LR == "L", -1, colour),
colour = ifelse(book == "2r" & word == "clock" & LR == "R", 1, colour),
colour = ifelse(book == "2r" & word == "glasses" & LR == "L", 1, colour),
colour = ifelse(book == "2r" & word == "glasses" & LR == "R", -1, colour),
colour = ifelse(book == "2r" & word == "bowl" & LR == "L", 1, colour),
colour = ifelse(book == "2r" & word == "bowl" & LR == "R", -1, colour),
colour = ifelse(book == "2r" & word == "coat" & LR == "L", -1, colour),
colour = ifelse(book == "2r" & word == "coat" & LR == "R", 1, colour),
test = ifelse(word == tolower(col1), T, F),
size = ifelse(is.na(colour) & test == T & word == col1 & LR == "L", 1, NA),
size = ifelse(is.na(colour) & test == T & word == col2 & LR == "R", 1, size),
size = ifelse(is.na(colour) & test == T & word != col1 & LR == "L", -1, size),
size = ifelse(is.na(colour) & test == T & word != col2 & LR == "R", -1, size)) %>%
dplyr::select(-test, -col1, -col2) %>%
mutate(paradigm = "3",
RWsize = NA)
all_data <- rbind(data_arr_poster, data_arr_book1, data_arr_book2) %>%
write_csv("data_arranged_all_levels.csv")
View(data_arr_book2)
data_arr_book2 <- data_arr %>%
filter(book %in% c("2", "2r")) %>%
mutate(Word = tolower(Word)) %>%
separate(Word, c("image_L", "image_R"), "_") %>%
mutate(item=pmap_chr(list(image_L, image_R), ~paste(sort(c(...)), collapse = "_")))  %>%
pivot_longer(
cols = starts_with("image"),
names_to = "LR",
names_prefix = "image_",
values_to = "word",
values_drop_na = TRUE
) %>%
separate(stimuli, c("col1", "col2"), " ") %>%
mutate(colour = ifelse(book == "2" & word == "clock" & LR == "L", 1, NA),
colour = ifelse(book == "2" & word == "clock" & LR == "R", -1, colour),
colour = ifelse(book == "2" & word == "glasses" & LR == "L", -1, colour),
colour = ifelse(book == "2" & word == "glasses" & LR == "R", 1, colour),
colour = ifelse(book == "2" & word == "bowl" & LR == "L", -1, colour),
colour = ifelse(book == "2" & word == "bowl" & LR == "R", 1, colour),
colour = ifelse(book == "2" & word == "coat" & LR == "L", 1, colour),
colour = ifelse(book == "2" & word == "coat" & LR == "R", -1, colour),
colour = ifelse(book == "2r" & word == "clock" & LR == "L", -1, colour),
colour = ifelse(book == "2r" & word == "clock" & LR == "R", 1, colour),
colour = ifelse(book == "2r" & word == "glasses" & LR == "L", 1, colour),
colour = ifelse(book == "2r" & word == "glasses" & LR == "R", -1, colour),
colour = ifelse(book == "2r" & word == "bowl" & LR == "L", 1, colour),
colour = ifelse(book == "2r" & word == "bowl" & LR == "R", -1, colour),
colour = ifelse(book == "2r" & word == "coat" & LR == "L", -1, colour),
colour = ifelse(book == "2r" & word == "coat" & LR == "R", 1, colour),
test = ifelse(word == tolower(col1), T, F),
size = ifelse(is.na(colour) & test == T & word == col1 & LR == "L", 1, NA),
size = ifelse(is.na(colour) & test == T & word == col2 & LR == "R", 1, size),
size = ifelse(is.na(colour) & test == T & word != col1 & LR == "L", -1, size),
size = ifelse(is.na(colour) & test == T & word != col2 & LR == "R", -1, size)) %>%
dplyr::select(-test, -col1, -col2) %>%
mutate(paradigm = "3",
RWsize = NA,
congruence = NA)
all_data <- rbind(data_arr_poster, data_arr_book1, data_arr_book2) %>%
write_csv("data_arranged_all_levels.csv")
stimuli <- read_csv("SS_audio_analysis.csv")
stimuli <- read_csv("SS_audio_analysis.csv")
SS_participants <- read_csv("SS_audio_analysis.csv")
View(SS_participants)
SS_participants <- read_csv("SS_audio_analysis.csv")%>%
pivot_longer(
cols = c("Book 1", "Poster", "Book 2"),
names_to = "Allocation",
#names_prefix = "image_",
values_to = "book",
values_drop_na = TRUE
)
SS_participants <- read_csv("SS_audio_analysis.csv")%>%
mutate(Poster = as.factor(Poster)) %>%
pivot_longer(
cols = c("Book 1", "Poster", "Book 2"),
names_to = "Allocation",
#names_prefix = "image_",
values_to = "book",
values_drop_na = TRUE
)
SS_participants <- read_csv("SS_audio_analysis.csv")
SS_participants <- read_csv("SS_audio_analysis.csv")%>%
mutate(#Poster = as.factor(Poster),
Poster = fct_recode(Poster,
1 = "P1",
2 = "P2",
3 = "P3",
4 = "P4"))
SS_participants <- read_csv("SS_audio_analysis.csv")%>%
mutate(#Poster = as.factor(Poster),
Poster = fct_recode(Poster,
"P1" = 1,
"P2" = 2,
"P3" = 3,
"P4" = 4))
SS_participants <- read_csv("SS_audio_analysis.csv")%>%
mutate(Poster = as.factor(Poster),
Poster = fct_recode(Poster,
"P1" = "1",
"P2" = "2",
"P3" = "3",
"P4" = "4"))
SS_participants <- read_csv("SS_audio_analysis.csv")%>%
SS_participants <- read_csv("SS_audio_analysis.csv") %>%
SS_participants <- read_csv("SS_audio_analysis.csv") %>%
mutate(Poster = as.factor(Poster),
Poster = fct_recode(Poster,
"P1" = "1",
"P2" = "2",
"P3" = "3",
"P4" = "4"))
SS_participants <- read_csv("SS_audio_analysis.csv") %>%
SS_participants <- read_csv("SS_audio_analysis.csv") %>%
mutate(Poster = as.factor(Poster),
Poster = fct_recode(Poster,
"P1" = "1",
"P2" = "2",
"P3" = "3",
"P4" = "4")) %>%
pivot_longer(
cols = c("Book 1", "Poster", "Book 2"),
names_to = "Allocation",
values_to = "book",
values_drop_na = TRUE
)
View(all_data)
SS_participants <- read_csv("SS_audio_analysis.csv") %>%
mutate(Poster = as.factor(Poster),
Poster = fct_recode(Poster,
"p1" = "1",
"p2" = "2",
"p3" = "3",
"p4" = "4")) %>%
pivot_longer(
cols = c("Book 1", "Poster", "Book 2"),
names_to = "Allocation",
values_to = "book",
values_drop_na = TRUE
)
SS_participants <- read_csv("SS_audio_analysis.csv") %>%
mutate(Poster = as.factor(Poster),
Poster = fct_recode(Poster,
"p1" = "1",
"p2" = "2",
"p3" = "3",
"p4" = "4")) %>%
pivot_longer(
cols = c("Book 1", "Poster", "Book 2"),
names_to = "Allocation",
values_to = "book",
values_drop_na = TRUE
) %>%
left_join(all_data)
stimuli <- read_csv("stimuli.csv")
large_items <- c("tree", "pig", "duck", "sheep",
"bed", "dog", "elephant", "lion",
"car", "tractor", "cow", "horse",
"bus", "monkey", "chair", "bike",
"tiger", "bath")
data_arr <- stimuli
data_arr$Word <- gsub("\\ ", "_", data_arr$stimuli)
data_arr_book1 <- data_arr %>%
filter(book %in% c("1a", "1ar", "1b", "1br", "1c", "1cr", "1d", "1dr")) %>%
mutate(Word = tolower(Word)) %>%
separate(Word, c("image_L", "image_R"), "_") %>%
mutate(item=pmap_chr(list(image_L, image_R), ~paste(sort(c(...)), collapse = "_")))  %>%
pivot_longer(
cols = starts_with("image"),
names_to = "LR",
names_prefix = "image_",
values_to = "word",
values_drop_na = TRUE
) %>%
separate(stimuli, c("col1", "col2"), " ") %>%
mutate(test = ifelse(word == tolower(col1), T, F)) %>%
mutate(size = ifelse(test == T & word == col1, 1, NA),
size = ifelse(test == T & word != col1, -1, size),
size = ifelse(test == F & word == col2, 1, size),
size = ifelse(test == F & word != col2, -1, size)) %>%
mutate(RWsize = ifelse(word %in% large_items, "L", "S"),
congruence = ifelse((RWsize == "L" & size == -1) | (RWsize == "S" & size == 1) , 1, -1)) %>%
dplyr::select(-test, -col1, -col2) %>%
mutate(paradigm = "2",
colour = NA)
data_arr_poster <- data_arr %>%
filter(book %in% c("p1", "p2", "p3", "p4")) %>%
mutate(Word = tolower(Word))  %>%
separate(Word, c("image_1", "image_2"), "_") %>%
mutate(item=pmap_chr(list(image_1, image_2), ~paste(sort(c(...)), collapse = "_")))  %>%
pivot_longer(
cols = starts_with("image"),
names_to = "LR",
names_prefix = "image_",
values_to = "word",
values_drop_na = TRUE
) %>%
separate(stimuli, c("col1", "col2"), " ") %>%
mutate(test = ifelse(word == tolower(col1), T, F)) %>%
mutate(size = ifelse(test == T & word == col1, 1, NA),
size = ifelse(test == T & word != col1, -1, size),
size = ifelse(test == F & word == col2, 1, size),
size = ifelse(test == F & word != col2, -1, size)) %>%
mutate(RWsize = ifelse(word %in% large_items, "L", "S"),
congruence = ifelse((RWsize == "L" & size == -1) | (RWsize == "S" & size == 1) , 1, -1))  %>%
dplyr::select(-test, -col1, -col2) %>%
mutate(paradigm = "1",
LR = NA,
colour = NA)
data_arr_book2 <- data_arr %>%
filter(book %in% c("2", "2r")) %>%
mutate(Word = tolower(Word)) %>%
separate(Word, c("image_L", "image_R"), "_") %>%
mutate(item=pmap_chr(list(image_L, image_R), ~paste(sort(c(...)), collapse = "_")))  %>%
pivot_longer(
cols = starts_with("image"),
names_to = "LR",
names_prefix = "image_",
values_to = "word",
values_drop_na = TRUE
) %>%
separate(stimuli, c("col1", "col2"), " ") %>%
mutate(colour = ifelse(book == "2" & word == "clock" & LR == "L", 1, NA),
colour = ifelse(book == "2" & word == "clock" & LR == "R", -1, colour),
colour = ifelse(book == "2" & word == "glasses" & LR == "L", -1, colour),
colour = ifelse(book == "2" & word == "glasses" & LR == "R", 1, colour),
colour = ifelse(book == "2" & word == "bowl" & LR == "L", -1, colour),
colour = ifelse(book == "2" & word == "bowl" & LR == "R", 1, colour),
colour = ifelse(book == "2" & word == "coat" & LR == "L", 1, colour),
colour = ifelse(book == "2" & word == "coat" & LR == "R", -1, colour),
colour = ifelse(book == "2r" & word == "clock" & LR == "L", -1, colour),
colour = ifelse(book == "2r" & word == "clock" & LR == "R", 1, colour),
colour = ifelse(book == "2r" & word == "glasses" & LR == "L", 1, colour),
colour = ifelse(book == "2r" & word == "glasses" & LR == "R", -1, colour),
colour = ifelse(book == "2r" & word == "bowl" & LR == "L", 1, colour),
colour = ifelse(book == "2r" & word == "bowl" & LR == "R", -1, colour),
colour = ifelse(book == "2r" & word == "coat" & LR == "L", -1, colour),
colour = ifelse(book == "2r" & word == "coat" & LR == "R", 1, colour),
test = ifelse(word == tolower(col1), T, F),
size = ifelse(is.na(colour) & test == T & word == col1 & LR == "L", 1, NA),
size = ifelse(is.na(colour) & test == T & word == col2 & LR == "R", 1, size),
size = ifelse(is.na(colour) & test == T & word != col1 & LR == "L", -1, size),
size = ifelse(is.na(colour) & test == T & word != col2 & LR == "R", -1, size)) %>%
dplyr::select(-test, -col1, -col2) %>%
mutate(paradigm = "3",
RWsize = NA,
congruence = NA)
all_data <- rbind(data_arr_poster, data_arr_book1, data_arr_book2)
SS_participants <- read_csv("SS_audio_analysis.csv") %>%
mutate(Poster = as.factor(Poster),
Poster = fct_recode(Poster,
"p1" = "1",
"p2" = "2",
"p3" = "3",
"p4" = "4")) %>%
pivot_longer(
cols = c("Book 1", "Poster", "Book 2"),
names_to = "Allocation",
values_to = "book",
values_drop_na = TRUE
) %>%
left_join(all_data) %>%
write_csv("data_arranged_all_levels.csv")
=======
age.test.input_df <- age.test.input_anova$Df[2]
age.test.input_chisq <- age.test.input_anova$Chisq[2]
age.test.input_p.value <- age.test.input_anova$pval[2]
# sex
sex.test.input <- lmer(Log.n ~ sex + (1|subj), data = subset(speaker.type, Speaker == "MOT"), REML=FALSE)
sex.test.input.null <- lmer(Log.n ~ (1|subj), data = subset(speaker.type, Speaker == "MOT"), REML=FALSE)
sex.test.input_anova <- anova(sex.test.input, sex.test.input.null) %>% # Strong effect for sex - include in all further models
rename("pval" = `Pr(>Chisq)`)  # no effect for sex
sex.test.input_df <- sex.test.input_anova$`Chi Df`[2]
sex.test.input_chisq <- sex.test.input_anova$Chisq[2]
sex.test.input_p.value <- sex.test.input_anova$pval[2]
cor.edu.input <- cor.test(
x = subset(speaker.type, month == 17 & Speaker == "MOT")$n
, y = subset(speaker.type, month == 17 & Speaker == "MOT")$MOTedulevel
, method = "spearman"
)
cor.vocab.input <- cor.test(
x = subset(SiblingsData, month == 17)$Total.words
, y = subset(speaker.type, month == 17 & Speaker == "MOT")$n
, method = "spearman"
)
cor.age.input<- cor.test(
x = subset(speaker.type, month == 17 & Speaker == "MOT")$n
, y = subset(speaker.type, month == 17 & Speaker == "MOT")$age_mom
, method = "spearman"
)
speaker.summary <-
speaker.type %>%
mutate(total.n = sum(n)) %>%
group_by(Speaker, total.n) %>%
summarise(total.speaker = sum(n)) %>%
mutate(PC.input = (total.speaker/total.n)*100)
mean.input.MOT <- speaker.type %>% filter(Speaker == "MOT") %>% summarise(mean.input = mean(n),  # 136.69
med.input = median(n),
sd.input = sd(n))      # 111.01
mean.input.FAT <- speaker.type %>% filter(Speaker == "FAT") %>% summarise(mean.input = mean(n),  # 18.14
med.input = median(n),
sd.input = sd(n))      # 42.01
mean.input.SIB <- speaker.type %>% filter(Speaker == "SIBLING" & SibGroup6 != "None") %>%
summarise(mean.input = mean(n),  # 13
med.input = median(n), # 6
sd.input = sd(n))      # 15.8
mean.input.all <- speaker.type %>%
group_by(SibGroup6) %>%
summarise(mean.input = mean(n),  # 53.9
med.input = median(n),
sd.input = sd(n))      # 90.6
cap = "Data summary of all three input variables and reported vocabulary size at 18 months."
kable(table.data.summary, "latex", booktabs = T, caption = cap, digits = 2, align = "c")  %>%
add_header_above(c(" " = 1, "No siblings" = 2, "1 sibling" = 2, "2+ siblings" = 2))
par(cex = 1.2)
Figure.speaker.count
cap <- sprintf("Mean number of words produced by Mothers, Fathers and Siblings across sessions recorded between 10-17 months. Circles represent values for individual infants; red triangles show group means.")
speaker.type.model <- lmerTest::lmer(Log.n ~ SibGroup6 + (1|subj), data=speaker.type, REML=FALSE)
speaker.type.model.null <- lmerTest::lmer(Log.n ~ (1|subj), data=speaker.type, REML=FALSE)
speaker.type_anova <- anova(speaker.type.model, speaker.type.model.null) %>%
rename("pval" = `Pr(>Chisq)`)
speaker.type_df <- speaker.type_anova$`Chi Df`[2]
speaker.type_chisq <- speaker.type_anova$Chisq[2]
speaker.type_p.value <- speaker.type_anova$pval[2]
speaker.type.mean <- speaker.type %>% group_by(subj) %>%
mutate(MeanN = mean(n))
speaker.type_wilcox_none_one <- wilcox.test(
x = subset(speaker.type.mean, SibGroup6 == "None")$MeanN
, y = subset(speaker.type.mean, SibGroup6 == "One")$MeanN
, paired = FALSE
)
speaker.type_wilcox_one_two <- wilcox.test(
x = subset(speaker.type.mean, SibGroup6 == "2+")$MeanN
, y = subset(speaker.type.mean, SibGroup6 == "One")$MeanN
, paired = FALSE
)
input.diff <-
speaker.type %>%
group_by(SibGroup6) %>%
summarise(meaninput = mean(Total.input))
input.diff <-
speaker.type %>%
group_by(SibGroup6) %>%
summarise(meaninput = mean(Family.input))
noneonediff <- input.diff$meaninput[1] - input.diff$meaninput[2]
nonetwodiff <- input.diff$meaninput[1] - input.diff$meaninput[3]
onetwodiff <- input.diff$meaninput[2] - input.diff$meaninput[3]
library(papaja)
library(tidyverse)
library(dplyr)
library(tibble)
library(lmerTest)
library(afex)
library(citr)
library(feather)
source("DataGathering.R")
source("Tables.R")
stat_sum_df <- function(fun, geom="crossbar", ...) {
stat_summary(fun.data = fun, colour = "red", geom = geom, width = 0.2, ...)
}
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
firstword <- CDI %>% group_by(subj) %>%
filter(Total.words > 0) %>%
summarise(firstword = min(month)) %>%
ungroup() %>%
mutate(firstword = as.numeric(firstword)) %>%
summarise(meanfirstword = mean(firstword),
sdfirstword = sd(firstword))
View(speaker.type)
View(speaker.type.n)
speaker.type.n %>% group_by(subj) %>%
mutate(other.speakers = All.speakers - Family.input)
speaker.type.n %>%
mutate(other.speakers = All.speakers - Family.input) %>%
group_by(subj)
speaker.type.n %>%
mutate(other.speakers = All.speakers - Family.input,
prop.other = other.speakers/All.speakers) %>%
group_by(subj) %>%
speaker.type.n %>%
mutate(other.speakers = All.speakers - Family.input,
prop.other = other.speakers/All.speakers) %>%
group_by(subj)
speaker.type.n %>%
mutate(other.speakers = All.speakers - Family.input,
prop.other = other.speakers/All.speakers) %>%
group_by(subj) %>%
summarise(PC.other.m = mean(prop.other),
PC.other.sd = sd(prop.other))
speaker.type.n %>%
mutate(other.speakers = All.speakers - Family.input,
prop.other = other.speakers/All.speakers) %>%
summarise(PC.other.m = mean(prop.other),
PC.other.sd = sd(prop.other))
shapiro.test(SiblingsData$Total.words)
shapiro.test(speaker.type.mean$MeanN) # not normal
speaker.type.mean <- speaker.type %>% group_by(subj) %>%
mutate(MeanN = mean(n))
shapiro.test(speaker.type.mean$MeanN) # not normal
shapiro.test(in.cdi.summary$meanPC) # not normal
in.cdi.summary <- in.cdi %>% group_by(SibGroup6, subj) %>%
summarize(meanPC = mean(PC),
medPC = median(PC),
sdPC = sd(PC))
shapiro.test(in.cdi.summary$meanPC) # not normal
in.cdi.summary.n <- in.cdi %>% group_by(SibGroup6, subj) %>%
summarize(meann = mean(n),
medn = median(n),
sdn = sd(n))
shapiro.test(in.cdi.summary.n$meann) # normal
object.presence.summary <- object.presence %>%
group_by(subj, SibGroup6) %>%
summarise(mean.object = mean(PC),
sd.object = sd(PC),
med.object = median(PC))
shapiro.test(object.presence.summary$mean.object)
speaker.summary <-
speaker.type %>%
mutate(total.n = sum(n)) %>%
group_by(Speaker, total.n) %>%
summarise(total.speaker = sum(n)) %>%
mutate(PC.input = (total.speaker/total.n)*100)
View(speaker.summary)
#shapiro.test(speaker.type$n) # not normal
speaker.type.model <- lmerTest::lmer(Log.n ~ SibGroup6 + (1|subj), data=speaker.type, REML=FALSE)
speaker.type.model.null <- lmerTest::lmer(Log.n ~ (1|subj), data=speaker.type, REML=FALSE)
speaker.type_anova <- anova(speaker.type.model, speaker.type.model.null) %>%
rename("pval" = `Pr(>Chisq)`)
speaker.type_df <- speaker.type_anova$`Chi Df`[2]
speaker.type_chisq <- speaker.type_anova$Chisq[2]
speaker.type_p.value <- speaker.type_anova$pval[2]
# post hoc comparisons
speaker.type.mean <- speaker.type %>% group_by(subj) %>%
mutate(MeanN = mean(n))
#shapiro.test(speaker.type.mean$MeanN) # not normal
speaker.type_wilcox_none_one <- wilcox.test(
x = subset(speaker.type.mean, SibGroup6 == "None")$MeanN
, y = subset(speaker.type.mean, SibGroup6 == "One")$MeanN
, paired = FALSE
)
speaker.type_wilcox_one_two <- wilcox.test(
x = subset(speaker.type.mean, SibGroup6 == "2+")$MeanN
, y = subset(speaker.type.mean, SibGroup6 == "One")$MeanN
, paired = FALSE
)
input.diff <-
speaker.type %>%
group_by(SibGroup6) %>%
summarise(meaninput = mean(Family.input))
noneonediff <- input.diff$meaninput[1] - input.diff$meaninput[2]
nonetwodiff <- input.diff$meaninput[1] - input.diff$meaninput[3]
onetwodiff <- input.diff$meaninput[2] - input.diff$meaninput[3]
speaker.type_df <- speaker.type_anova$`Df`[2]
speaker.type.FAT <- speaker.type %>% group_by(subj) %>%
filter(Speaker == "FAT") %>%
mutate(MeanN = mean(n))  %>%
filter(month == 17)
speaker.type.FAT_wilcox_none_one <- wilcox.test(
x = subset(speaker.type.FAT, SibGroup6 == "None")$MeanN
, y = subset(speaker.type.FAT, SibGroup6 == "One")$MeanN
, paired = FALSE
) # NS
speaker.type.FAT_wilcox_one_two <- wilcox.test(
x = subset(speaker.type.FAT, SibGroup6 == "2+")$MeanN
, y = subset(speaker.type.FAT, SibGroup6 == "One")$MeanN
, paired = FALSE
) # p<.001
wilcox.test(
x = subset(speaker.type.FAT, SibGroup6 == "None")$MeanN
, y = subset(speaker.type.FAT, SibGroup6 == "One")$MeanN
, paired = FALSE
) # NS
wilcox.test(
x = subset(speaker.type.FAT, SibGroup6 == "2+")$MeanN
, y = subset(speaker.type.FAT, SibGroup6 == "One")$MeanN
, paired = FALSE
)
=======
speaker.type %>%
filter(Speaker == "SIBLING" & SibsYN == "Y") %>%
mutate(present = ifelse(n > 0, 1, 0))
speaker.type %>%
filter(Speaker == "SIBLING" & SibsYN == "Y") %>%
mutate(present = ifelse(n > 0, 1, 0)) %>%
group_by(present) %>%
tally()
sib.present <- speaker.type %>%
filter(Speaker == "SIBLING" & SibsYN == "Y") %>%
mutate(present = ifelse(n > 0, 1, 0)) %>%
group_by(present) %>%
tally() %>%
mutate(total = sum(n))
speaker.type %>%
filter(Speaker == "SIBLING" & SibsYN == "Y") %>%
mutate(present = ifelse(n > 0, 1, 0)) %>%
group_by(present) %>%
tally() %>%
mutate(total = sum(n))
speaker.type %>%
filter(Speaker == "SIBLING" & SibsYN == "Y") %>%
mutate(present = ifelse(n > 0, 1, 0)) %>%
group_by(present) %>%
tally() %>%
mutate(total = sum(n),
prop.present = n/total) %>%
filter(present == 0)
speaker.type %>%
filter(Speaker == "SIBLING" & SibsYN == "Y") %>%
mutate(present = ifelse(n > 0, 1, 0)) %>%
group_by(present) %>%
tally() %>%
mutate(total = sum(n),
prop.present = n/total) %>%
filter(present == 0)
speaker.type %>%
filter(Speaker == "SIBLING" & SibsYN == "Y") %>%
mutate(present = ifelse(n > 0, 1, 0)) %>%
group_by(present) %>%
tally() %>%
mutate(total = sum(n),
prop.present = n/total)
speaker.type %>%
filter(Speaker == "SIBLING" & SibsYN == "Y") %>%
mutate(present = ifelse(n > 0, 1, 0)) %>%
group_by(present) %>%
tally() %>%
mutate(total = sum(n),
prop.present = n/total) %>%
filter(present == 1)
sib.present$n
speaker.type %>%
filter(Speaker == "SIBLING" & SibsYN == "Y") %>%
mutate(present = ifelse(n > 0, 1, 0)) %>%
group_by(present) %>%
tally() %>%
mutate(total = sum(n),
prop.present = n/total) %>%
filter(present == 1)
sib.present <- speaker.type %>%
filter(Speaker == "SIBLING" & SibsYN == "Y") %>%
mutate(present = ifelse(n > 0, 1, 0)) %>%
group_by(present) %>%
tally() %>%
mutate(total = sum(n),
prop.present = n/total) %>%
filter(present == 1)
sib.present$n
speaker.type %>%
filter(Speaker == "SIBLING" & SibsYN == "Y") %>%
mutate(present = ifelse(n > 0, 1, 0)) %>%
group_by(present) %>%
tally() %>%
mutate(total = sum(n),
prop.present = n/total) %>%
filter(present == 1)
View(in.cdi)
View(sibsdata)
in.cdi <- sibsdata %>%            # create dataset that classifies each basic_level as matching or not matching CDI list in wordlist
left_join(wordlist) %>%
select(-CDIform, -object)
View(in.cdi)
in.cdi %>% filter(is.na(basic_level)) %>% tally()
## Data gathering: Updated 14th February 2020 ##
# This file extracts the relevant data from the basiclevels feather spreadsheet in the Seedlings folder
# Three main variables are extracted and joined with the Demographics spreadsheet: object presence, utterance type, and speaker type.
# This script also summarizes in.cdi data. This relates to the 'ease of acquisition' variable in the analysis.
source("Demographics.R")
library(tidyverse)
library(readr)
library(feather)
library(stringi)
library(stringr)
library(forcats)
# work from basic levels spreadsheet
sibsdata <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
filter(audio_video =='video',   # Only use video data
speaker != 'CHI') %>%    # remove infant productions
dplyr::select(
utterance_type,
speaker,
object_present,
basic_level,
subj,
month) %>%
mutate(basic_level = str_to_lower(basic_level),
speaker = factor(speaker),
speaker = fct_collapse(speaker,
"SIBLING" = c("BRO", "BR1", "BR2", "SIS", "SI1", "SI2")),  # rename speakers
subj = factor(subj))
wordlist <- read_csv("Data/in_cdi_Wordlist.csv") # Read in CDI wordlist that matches sibsdata$basic_level with words on the CDI
## Utterance type: What kinds of utterances occur in the infants' inputs?
utterance.type.n <- sibsdata %>%
filter(speaker %in% c("MOT", "FAT", "SIBLING"))  %>%    # Remove other speakers from data
filter(utterance_type %in%
c("d", "i", "n", "q", "r", "s", "u"))  %>%
group_by(subj, month, utterance_type) %>%
tally() %>%
spread(utterance_type, n) %>%
ungroup() %>%
replace(is.na(.), 0)
# Turn rows to columns for both N and PC, create new datasets to keep it manageable
utterance.type.PC <- utterance.type.n %>%
mutate(Total.input = (d + i + n + q + r + s + u),         # create % of each utterance type
PCd = d/Total.input,
PCi = i/Total.input,
PCn = n/Total.input,
PCq = q/Total.input,
PCr = r/Total.input,
PCs = s/Total.input,
PCu = u/Total.input) %>%
dplyr::select(subj, month, PCd,PCi, PCn, PCq, PCr, PCs, PCu) %>%
gather(`PCd`,`PCi`, `PCn`, `PCq`, `PCr`, `PCs`, `PCu`,
key = "TypePC",
value = "PC") %>%
dplyr::select(subj, month, TypePC, PC) %>%  # Remove unnecessary columns
mutate(TypePC = factor(TypePC),
TypePC = fct_recode(TypePC,
"d" = "PCd",
"i" = "PCi",
"n" = "PCn",
"q" = "PCq",
"r" = "PCr",
"s" = "PCs",
"u" = "PCu")) %>%
rename(Type = TypePC)
utterance.type <- utterance.type.n %>%
gather(`d`,`i`, `n`, `q`, `r`, `s`, `u`,
key = "Type",
value = "n") %>%
mutate(Type = factor(Type)) %>%
dplyr::select(subj, month, Type, n) %>%
left_join(utterance.type.PC) %>%
left_join(demographics) %>%      # Combine with demographics spreadsheet
mutate(Log.n = log(n+1),
# Add a column to show which factors represent joint engagement (R, S, Q)
JE = ifelse((Type=='r'| Type=='s' | Type=='q'), T, F))
## Object presence: How much caregiver input relates to objects that are present in the infant's environment?
object.presence <- sibsdata %>%
filter(speaker %in% c("MOT", "FAT", "SIBLING"))  %>%    # Remove other speakers from data
filter(object_present %in%
c("y", "n")) %>%
group_by(subj, month, object_present) %>%
tally() %>%
spread(object_present, n) %>%
replace(is.na(.), 0) %>%
ungroup() %>%
mutate(Total = n + y,
PC = y/Total) %>%
dplyr::select(subj, month, y, PC) %>%
rename(n = y) %>%
left_join(demographics) %>%
mutate(Log.n = log(n+1))
## Speaker type
# Spread information across columns
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
rowwise() %>%
mutate(All.speakers = sum(c_across(AF3:UNC))) %>%
ungroup() %>%
mutate(Family.input = (MOT + FAT + SIBLING)) %>%
dplyr::select(subj, month, MOT, FAT, SIBLING, Family.input, All.speakers)
speaker.type <- speaker.type.n %>%
gather(`MOT`,`FAT`, `SIBLING`,
key = "Speaker",
value = "n") %>%
left_join(demographics) %>%
mutate(Log.n = log(n+1))
# CDI data: is the word the caregiver produces deemed to be 'learnable' in early acquisition (i.e. is it on the CDI)?
# queries <- sibsdata %>%            # with updated basic_levels.feather I need to first go through and classify words that are not in the original wordlist doc
#   left_join(wordlist) %>%
#   select(-CDIform, -object) %>%
#   filter(is.na(in_cdi)) %>%
#   write_csv("cdi_queries.csv")
in.cdi <- sibsdata %>%            # create dataset that classifies each basic_level as matching or not matching CDI list in wordlist
left_join(wordlist) %>%
select(-CDIform, -object) %>%
filter(!is.na(in_cdi)) %>%               # filter these for now while wating for final basic_levels, but remove filter once queries have been sorted
group_by(subj, month, in_cdi) %>%
tally() %>%
spread(in_cdi, n) %>%
replace(is.na(.), 0) %>%
ungroup() %>%
rename(n = `TRUE`,
False = `FALSE`) %>%
mutate(Total = False + n,
PC = n/Total,
Log.n = log(n+1)) %>%
dplyr::select(subj, month, n, PC) %>%
left_join(demographics)                        # Combine with demographics data
sib.ages <- read_csv("Data/SiblingAges.csv") %>%   # Read in data showing age differences between subj and siblings
mutate(subj = factor(subj))
in.cdi <- sibsdata %>%            # create dataset that classifies each basic_level as matching or not matching CDI list in wordlist
left_join(wordlist) %>%
select(-CDIform, -object)
in.cdi %>% filter(is.na(in_cdi))
in.cdi %>% filter(is.na(in_cdi)) %>% tally()
queries <- sibsdata %>%            # with updated basic_levels.feather I need to first go through and classify words that are not in the original wordlist doc
left_join(wordlist) %>%
select(-CDIform, -object) %>%
filter(is.na(in_cdi)) %>%
write_csv("cdi_queries_Mar22.csv")
View(queries)
queries <- sibsdata %>%            # with updated basic_levels.feather I need to first go through and classify words that are not in the original wordlist doc
left_join(wordlist) %>%
select(-CDIform, -object) %>%
filter(is.na(in_cdi)) %>%
distinct(basic_level, .keep_all = TRUE) %>%
write_csv("cdi_queries_Mar22.csv")
queries <- sibsdata %>%            # with updated basic_levels.feather I need to first go through and classify words that are not in the original wordlist doc
left_join(wordlist) %>%
select(-CDIform, -object) %>%
filter(is.na(in_cdi)) %>%
distinct(basic_level, .keep_all = TRUE) %>%
write_csv("cdi_queries_Mar22.csv")
queries <- sibsdata %>%            # with updated basic_levels.feather I need to first go through and classify words that are not in the original wordlist doc
left_join(wordlist) %>%
select(-CDIform, -object) %>%
filter(is.na(in_cdi) & Speaker %in% c("MOT", "FAT", "SIBLING")) %>%
distinct(basic_level, .keep_all = TRUE) %>%
write_csv("cdi_queries_Mar22.csv")
sibsdata %>%            # with updated basic_levels.feather I need to first go through and classify words that are not in the original wordlist doc
left_join(wordlist) %>%
select(-CDIform, -object) %>%
filter(is.na(in_cdi) & speaker %in% c("MOT", "FAT", "SIBLING")) %>%
distinct(basic_level, .keep_all = TRUE)
queries <- sibsdata %>%            # with updated basic_levels.feather I need to first go through and classify words that are not in the original wordlist doc
left_join(wordlist) %>%
select(-CDIform, -object) %>%
filter(is.na(in_cdi) & speaker %in% c("MOT", "FAT", "SIBLING")) %>%
distinct(basic_level, .keep_all = TRUE) %>%
write_csv("cdi_queries_Mar22.csv")
queries <- sibsdata %>%            # with updated basic_levels.feather I need to first go through and classify words that are not in the original wordlist doc
left_join(wordlist) %>%
select(-CDIform, -object) %>%
filter(is.na(in_cdi) & speaker %in% c("MOT", "FAT", "SIBLING")) %>%
distinct(basic_level, .keep_all = TRUE) %>%
write_csv("cdi_queries_Mar22.csv")
>>>>>>> 9f2c034253858e1ae1079385033d973cc17848f1
wordlist <- read_csv("Data/in_cdi_Wordlist.csv") # Read in CDI wordlist that matches sibsdata$basic_level with words on the CDI
library(tidyverse)
library(readr)
library(feather)
library(stringi)
library(stringr)
library(forcats)
wordlist <- read_csv("Data/in_cdi_Wordlist.csv") # Read in CDI wordlist that matches sibsdata$basic_level with words on the CDI
in_cdi_queries <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
distinct(basic_level, object) %>%
left_join(wordlist, by=c("basic_level"="Word")) %>% # match words to CDI forms using the CDI_wordlist.csv spreadsheet
mutate(in_cdi = ifelse(!is.na(Form),T, F)) %>%
arrange(desc(in_cdi))
in_cdi_queries <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
distinct(basic_level, object)
View(in_cdi_queries)
View(wordlist)
in_cdi_queries <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
distinct(basic_level, object) %>%
left_join(wordlist, by=c("basic_level"="object"))
in_cdi_queries <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
distinct(basic_level, object) %>%
left_join(wordlist, by=c("basic_level"="CDIform"))
in_cdi_queries <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
distinct(basic_level, object) %>%
left_join(wordlist, by=c("basic_level"="Word"))
in_cdi_queries <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
distinct(basic_level, object) %>%
left_join(wordlist, by=c("basic_level"="object"))
in_cdi_queries <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
distinct(basic_level, object)
View(in_cdi_queries)
>>>>>>> 259a69f3819966bda5cae944dc8125f004b33013
