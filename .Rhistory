FATwork = paternal_employment_18mos,
FATworkhours = paternal_employment_hours_18mos) %>%
mutate(MOTedu = factor(MOTedu),  # rename variables according to key in shared folder
MOTedu = fct_recode(MOTedu,
"High School" = "E",
"Some college" = "H",
"Assoc Degree" = "I",
"Bachelors Degree" = "J",
"Masters Degree" = "K",
"Doctorate" = "L"),
MOTwork = ifelse(MOTwork %in% c("H","I"),"Other", MOTwork),       # Three mothers not classed as working FT, PT or Home; class as 'Other' or PT, as relevant
MOTwork = ifelse(MOTwork == "B_E", "B", MOTwork),
MOTwork = factor(MOTwork),
MOTwork = fct_recode(MOTwork,
"Full-time" = "A",
"Part-time" = "B",
"Home" = "C"),
FATwork = ifelse(FATwork !="A" & FATwork !="B" & FATwork != "C", "Other",  # Recode fathers' work status so that fathers who don't work FT, PT,
FATwork),                                                      # or stay home (e.g. full-time students) are listed as 'other'
FATwork = factor(FATwork),
FATwork = fct_recode(FATwork,
"Full-time" = "A",
"Home" = "C"),
Siblings18 = children_in_household_18mos_staff - 1,   # new variable for sibling number at 18 months
Siblings6 = children_in_household_6mos_staff - 1,      # new variable for sibling number at 6 months
SibsYN = ifelse(Siblings6 == 0, "N", "Y"),             # binomial variable for slibling status (Y = siblings, N = No siblings)
SibGroup6 = factor(Siblings6),                          # new variable for sibling group, 0, 1, 2+ siblings
SibGroup6 = fct_recode(SibGroup6,
"None" = "0",
"One" = "1",
"2+" = "2",
"2+" = "3",
"2+" = "4"),
SibGroup18 = factor(Siblings18),                          # new variable for sibling group, 0, 1, 2+ siblings
SibGroup18 = fct_recode(SibGroup18,
"None" = "0",
"One" = "1",
"2+" = "2",
"2+" = "3",
"2+" = "4"),
# SibsDiscrete = factor(Siblings),                       # discrete variable for sibling number at 6 months
# SibsDiscrete = fct_recode(SibsDiscrete,
#                       "None" = "0",
#                       "One" = "1",
#                       "Two" = "2",
#                       "Three" = "3",
#                       "Four" = "4"),
MOTedulevel = fct_recode(MOTedu,
"1" = "High School",
"2" = "Some college",
"3" = "Assoc Degree",
"4" = "Bachelors Degree",
"5" = "Masters Degree",
"6" = "Doctorate"),
MOTedulevel = as.numeric(MOTedulevel)) %>%
dplyr::select(-children_in_household_6mos_staff, -children_in_household_18mos_staff) %>%
left_join(PVT)   # merge with PVT data
write_csv(demographics, "Data/Demographics.csv", append = FALSE, col_names = TRUE)
SiblingsData <- demographics %>%
left_join(ProductionData) %>%
dplyr::select(                                      # re-order columns
subj,
month,
sex,
MOTedu,
MOTedulevel,
age_mom,
PVTscore,
MOTwork,
MOTworkhours,
FATwork,
FATworkhours,
SibsYN,
Siblings6,
Siblings18,
SibGroup6,
SibGroup18,
#SibsDiscrete,
Total.words,
Log.Totalwords,
tokens_video,
types_video,
tokens_audio,
types_audio)  %>%
mutate(Log.tokens_video = log(tokens_video+1),
Log.types_video = log(types_video+1),
Log.tokens_audio = log(tokens_audio+1),
Log.types_audio = log(types_audio+1))
write_csv(SiblingsData, "Data/SiblingsData.csv", append = FALSE, col_names = TRUE)
sibsdata <- read_csv("Data/all_basiclevel_NA_randsubj.csv") %>%
filter(audio_video =='video',   # Only use video data
speaker != 'CHI') %>%    # remove infant productions
dplyr::select(
utterance_type,
speaker,
object_present,
basic_level,
subj,
month) %>%
mutate(basic_level = str_to_lower(basic_level),
speaker = factor(speaker),
speaker = fct_collapse(speaker,
"SIBLING" = c("BRO", "BR1", "BR2", "SIS", "SI1", "SI2"),  # rename speakers
"TV" = c("TVN", "TVB", "TVM", "TVS")),
subj = factor(subj)) %>%
filter(speaker %in% c("TV", "TOY", "MOT", "FAT", "SIBLING"))                               # Remove other speakers from data
sibsdata <- read_csv("Data/all_basiclevel_NA_randsubj.csv") %>%
filter(audio_video =='video',   # Only use video data
speaker != 'CHI') %>%    # remove infant productions
dplyr::select(
utterance_type,
speaker,
object_present,
basic_level,
subj,
month) %>%
mutate(basic_level = str_to_lower(basic_level),
speaker = factor(speaker),
speaker = fct_collapse(speaker,
"SIBLING" = c("BRO", "BR1", "BR2", "SIS", "SI1", "SI2"))  # rename speakers
subj = factor(subj)) %>%
filter(speaker %in% c("TVS", "MOT", "FAT", "SIBLING"))                               # Remove other speakers from data
sibsdata <- read_csv("Data/all_basiclevel_NA_randsubj.csv") %>%
filter(audio_video =='video',   # Only use video data
speaker != 'CHI') %>%    # remove infant productions
dplyr::select(
utterance_type,
speaker,
object_present,
basic_level,
subj,
month) %>%
mutate(basic_level = str_to_lower(basic_level),
speaker = factor(speaker),
speaker = fct_collapse(speaker,
"SIBLING" = c("BRO", "BR1", "BR2", "SIS", "SI1", "SI2"))  # rename speakers
subj = factor(subj)) %>%
filter(speaker %in% c("TVS", "MOT", "FAT", "SIBLING"))                               # Remove other speakers from data
sibsdata <- read_csv("Data/all_basiclevel_NA_randsubj.csv") %>%
filter(audio_video =='video',   # Only use video data
speaker != 'CHI') %>%    # remove infant productions
dplyr::select(
utterance_type,
speaker,
object_present,
basic_level,
subj,
month)
View(sibsdata)
utterance_type,
speaker,
object_present,
basic_level,
subj,
month) %>%
mutate(basic_level = str_to_lower(basic_level),
speaker = factor(speaker),
speaker = fct_collapse(speaker,
"SIBLING" = c("BRO", "BR1", "BR2", "SIS", "SI1", "SI2"),  # rename speakers
subj = factor(subj)) %>%
filter(speaker %in% c("TVS", "MOT", "FAT", "SIBLING"))                               # Remove other speakers from data
sibsdata <- read_csv("Data/all_basiclevel_NA_randsubj.csv") %>%
filter(audio_video =='video',   # Only use video data
speaker != 'CHI') %>%    # remove infant productions
dplyr::select(
utterance_type,
speaker,
object_present,
basic_level,
subj,
month) %>%
mutate(basic_level = str_to_lower(basic_level),
speaker = factor(speaker),
speaker = fct_collapse(speaker,
"SIBLING" = c("BRO", "BR1", "BR2", "SIS", "SI1", "SI2")),  # rename speakers
subj = factor(subj)) %>%
filter(speaker %in% c("TVS", "MOT", "FAT", "SIBLING"))                               # Remove other speakers from data
wordlist <- read_csv("Data/in_cdi_Wordlist.csv") # Read in CDI wordlist that matches sibsdata$basic_level with words on the CDI
utterance.type.n <- sibsdata %>%
filter(utterance_type %in%
c("d", "i", "n", "q", "r", "s", "u")) %>%
group_by(subj, month, utterance_type) %>%
tally() %>%
spread(utterance_type, n) %>%
ungroup() %>%
replace(is.na(.), 0)
utterance_type,
speaker,
object_present,
basic_level,
subj,
month) %>%
mutate(basic_level = str_to_lower(basic_level),
speaker = factor(speaker),
speaker = fct_collapse(speaker,
"SIBLING" = c("BRO", "BR1", "BR2", "SIS", "SI1", "SI2")),  # rename speakers
subj = factor(subj)) %>%
filter(speaker %in% c("MOT", "FAT", "SIBLING"))                               # Remove other speakers from data
sibsdata <- read_csv("Data/all_basiclevel_NA_randsubj.csv") %>%
filter(audio_video =='video',   # Only use video data
speaker != 'CHI') %>%    # remove infant productions
dplyr::select(
utterance_type,
speaker,
object_present,
basic_level,
subj,
month) %>%
mutate(basic_level = str_to_lower(basic_level),
speaker = factor(speaker),
speaker = fct_collapse(speaker,
"SIBLING" = c("BRO", "BR1", "BR2", "SIS", "SI1", "SI2")),  # rename speakers
subj = factor(subj)) %>%
filter(speaker %in% c("MOT", "FAT", "SIBLING"))                               # Remove other speakers from data
wordlist <- read_csv("Data/in_cdi_Wordlist.csv") # Read in CDI wordlist that matches sibsdata$basic_level with words on the CDI
utterance.type.n <- sibsdata %>%
filter(utterance_type %in%
c("d", "i", "n", "q", "r", "s", "u")) %>%
group_by(subj, month, utterance_type) %>%
tally() %>%
spread(utterance_type, n) %>%
ungroup() %>%
replace(is.na(.), 0)
utterance.type.PC <- utterance.type.n %>%
mutate(Total.input = (d + i + n + q + r + s + u),         # create % of each utterance type
PCd = d/Total.input,
PCi = i/Total.input,
PCn = n/Total.input,
PCq = q/Total.input,
PCr = r/Total.input,
PCs = s/Total.input,
PCu = u/Total.input) %>%
dplyr::select(subj, month, PCd,PCi, PCn, PCq, PCr, PCs, PCu) %>%
gather(`PCd`,`PCi`, `PCn`, `PCq`, `PCr`, `PCs`, `PCu`,
key = "TypePC",
value = "PC") %>%
dplyr::select(subj, month, TypePC, PC) %>%  # Remove unnecessary columns
mutate(TypePC = factor(TypePC),
TypePC = fct_recode(TypePC,
"d" = "PCd",
"i" = "PCi",
"n" = "PCn",
"q" = "PCq",
"r" = "PCr",
"s" = "PCs",
"u" = "PCu")) %>%
rename(Type = TypePC)
utterance.type <- utterance.type.n %>%
gather(`d`,`i`, `n`, `q`, `r`, `s`, `u`,
key = "Type",
value = "n") %>%
mutate(Type = factor(Type)) %>%
dplyr::select(subj, month, Type, n) %>%
left_join(utterance.type.PC) %>%
left_join(demographics) %>%      # Combine with demographics spreadsheet
mutate(Log.n = log(n+1),
# Add a column to show which factors represent joint engagement (R, S, Q)
JE = ifelse((Type=='r'| Type=='s' | Type=='q'), T, F))
object.presence <- sibsdata %>%
filter(object_present %in%
c("y", "n")) %>%
group_by(subj, month, object_present) %>%
tally() %>%
spread(object_present, n) %>%
replace(is.na(.), 0) %>%
ungroup() %>%
mutate(Total = n + y,
PC = y/Total) %>%
dplyr::select(subj, month, y, PC) %>%
rename(n = y) %>%
left_join(demographics) %>%
mutate(Log.n = log(n+1))
## Speaker type
# Spread information across columns
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
ungroup() %>%
replace(is.na(.), 0)
View(speaker.type.n)
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
ungroup() %>%
replace(is.na(.), 0) %>%
mutate(Total.input = (MOT + FAT + SIBLING))#,
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n)
View(speaker.type.n)
sibsdata <- read_csv("Data/all_basiclevel_NA_randsubj.csv") %>%
filter(audio_video =='video',   # Only use video data
speaker != 'CHI') %>%    # remove infant productions
dplyr::select(
utterance_type,
speaker,
object_present,
basic_level,
subj,
month) %>%
mutate(basic_level = str_to_lower(basic_level),
speaker = factor(speaker),
speaker = fct_collapse(speaker,
"SIBLING" = c("BRO", "BR1", "BR2", "SIS", "SI1", "SI2")),  # rename speakers
subj = factor(subj))
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n)
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"))
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY)
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
rowSums(AF3:UNC)
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
rowSums(`AF3`:`UNC`)
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
rowwise() %>%
mutate(sum = sum(AF3:UNC))
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
#rowwise() %>%
mutate(sum = sum(AF3:UNC))
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
rowwise() %>%
mutate(sum = rowSums(AF3:UNC))
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
rowwise() %>%
mutate(sum = rowSums("AF3":"UNC"))
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
rowwise() %>%
mutate(sum = rowSums(`AF3`:`UNC`))
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
rowwise() %>%
summarise(sum = rowSums(`AF3`:`UNC`))
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
mutate(Total = select(., AF3:UNC) %>%
rowSums(na.rm = TRUE))
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
mutate(Total = select(., AF3:UNC) %>%
rowSums())
head(speaker.type.n)
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
mutate(sum_1 = rowSums(.[AF3:UNC]))
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
mutate(sum_1 = rowSums(.[3:72]))
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
mutate(sum_1 = rowSums(select(.,AF3:UNC)))
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
rowwise() %>%
mutate(sum = sum(c_across(AF3:UNC)))
ungroup() %>%
mutate(Family.input = (MOT + FAT + SIBLING))
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
rowwise() %>%
mutate(All_speakers = sum(c_across(AF3:UNC))) %>%
ungroup() %>%
mutate(Family.input = (MOT + FAT + SIBLING))
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
rowwise() %>%
mutate(All.speakers = sum(c_across(AF3:UNC))) %>%
ungroup() %>%
mutate(Family.input = (MOT + FAT + SIBLING)) %>%
dplyr::select(subj, month, MOT, FAT, SIBLING, Family.input, All.speakers)
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
rowwise() %>%
mutate(All.speakers = sum(c_across(AF3:UNC))) %>%
ungroup() %>%
mutate(Family.input = (MOT + FAT + SIBLING)) %>%
dplyr::select(subj, month, MOT, FAT, SIBLING, Family.input, All.speakers)
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
rowwise() %>%
mutate(All.speakers = sum(c_across(AF3:UNC))) %>%
ungroup() %>%
mutate(Family.input = (MOT + FAT + SIBLING))
View(speaker.type.n)
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
rowwise() %>%
mutate(All.speakers = sum(c_across(AF3:UNC))) %>%
ungroup() %>%
mutate(Family.input = (MOT + FAT + SIBLING)) %>%
dplyr::select(subj, month, MOT, FAT, SIBLING, Family.input, All.speakers)
View(speaker.type.n)
speaker.type <- speaker.type.n %>%
gather(`MOT`,`FAT`, `SIBLING`,
key = "Speaker",
value = "n") %>%
left_join(demographics) %>%
mutate(Log.n = log(n+1))
View(speaker.type)
in.cdi <- sibsdata %>%            # create dataset that classifies each basic_level as matching or not matching CDI list in wordlist
left_join(wordlist) %>%
select(-CDIform, -object) %>%
filter(!is.na(in_cdi)) %>%               # filter these for now while wating for final basic_levels, but remove filter once queries have been sorted
group_by(subj, month, in_cdi) %>%
tally() %>%
spread(in_cdi, n) %>%
replace(is.na(.), 0) %>%
ungroup() %>%
rename(n = `TRUE`,
False = `FALSE`) %>%
mutate(Total = False + n,
PC = n/Total,
Log.n = log(n+1)) %>%
dplyr::select(subj, month, n, PC) %>%
left_join(demographics)                        # Combine with demographics data
sib.ages <- read_csv("Data/SiblingAges.csv") %>%   # Read in data showing age differences between subj and siblings
mutate(subj = factor(subj))
