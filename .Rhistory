spread(in_cdi, n) %>%
replace(is.na(.), 0) %>%
ungroup() %>%
rename(n = `TRUE`,
False = `FALSE`) %>%
mutate(Total = False + n,
PC = n/Total,
Log.n = log(n+1)) %>%
dplyr::select(subj, month, audio_video, n, PC, Total) %>%
left_join(demographics)                        # Combine with demographics data
sib.ages <- read_csv("Data/SiblingAges.csv") %>%   # Read in data showing age differences between subj and siblings
mutate(subj = factor(subj))
## Data gathering: Updated March 2022 ##
# This file extracts the relevant data from the basiclevels feather spreadsheet in the Seedlings folder
# Three main variables are extracted and joined with the Demographics spreadsheet: object presence, utterance type, and speaker type.
# This script also summarizes in.cdi data. This relates to the 'ease of acquisition' variable in the analysis.
source("Demographics.R")
library(tidyverse)
library(readr)
library(feather)
library(stringi)
library(stringr)
library(forcats)
# work from basic levels spreadsheet
sibsdata <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
filter(#audio_video =='video',   # Only use video data
speaker != 'CHI') %>%    # remove infant productions
dplyr::select(
audio_video,
utterance_type,
speaker,
object_present,
basic_level,
subj,
month) %>%
mutate(basic_level = str_to_lower(basic_level),
speaker = factor(speaker),
speaker = fct_collapse(speaker,
"SIBLING" = c("BRO", "BR1", "BR2", "SIS", "SI1", "SI2")),  # rename speakers
subj = factor(subj))
wordlist <- read_csv("Data/in_cdi_Wordlist.csv") # Read in CDI wordlist that matches sibsdata$basic_level with words on the CDI
## Utterance type: What kinds of utterances occur in the infants' inputs?
utterance.type.n <- sibsdata %>%
filter(speaker %in% c("MOT", "FAT", "SIBLING"))  %>%    # Remove other speakers from data
filter(utterance_type %in%
c("d", "i", "n", "q", "r", "s", "u"))  %>%
group_by(subj, month, utterance_type, audio_video) %>%
tally() %>%
spread(utterance_type, n) %>%
#spread(audio_video, n) %>%
ungroup() %>%
replace(is.na(.), 0)
# Turn rows to columns for both N and PC, create new datasets to keep it manageable
utterance.type.PC <- utterance.type.n %>%
mutate(Total.input = (d + i + n + q + r + s + u),         # create % of each utterance type
PCd = d/Total.input,
PCi = i/Total.input,
PCn = n/Total.input,
PCq = q/Total.input,
PCr = r/Total.input,
PCs = s/Total.input,
PCu = u/Total.input) %>%
dplyr::select(subj, month, audio_video, PCd,PCi, PCn, PCq, PCr, PCs, PCu) %>%
gather(`PCd`,`PCi`, `PCn`, `PCq`, `PCr`, `PCs`, `PCu`,
key = "TypePC",
value = "PC") %>%
dplyr::select(subj, month, audio_video, TypePC, PC) %>%  # Remove unnecessary columns
mutate(TypePC = factor(TypePC),
TypePC = fct_recode(TypePC,
"d" = "PCd",
"i" = "PCi",
"n" = "PCn",
"q" = "PCq",
"r" = "PCr",
"s" = "PCs",
"u" = "PCu")) %>%
rename(Type = TypePC) %>%
left_join(demographics)
utterance.type <- utterance.type.n %>%
gather(`d`,`i`, `n`, `q`, `r`, `s`, `u`,
key = "Type",
value = "n") %>%
mutate(Type = factor(Type)) %>%
dplyr::select(subj, month, audio_video, Type, n) %>%
left_join(utterance.type.PC) %>%
left_join(demographics) %>%      # Combine with demographics spreadsheet
mutate(Log.n = log(n+1),
# Add a column to show which factors represent joint engagement (R, S, Q)
JE = ifelse((Type=='r'| Type=='s' | Type=='q'), T, F))
## Object presence: How much caregiver input relates to objects that are present in the infant's environment?
object.presence <- sibsdata %>%
filter(speaker %in% c("MOT", "FAT", "SIBLING"))  %>%    # Remove other speakers from data
filter(object_present %in%
c("y", "n")) %>%
group_by(subj, month, audio_video, object_present) %>%
tally() %>%
spread(object_present, n) %>%
replace(is.na(.), 0) %>%
ungroup() %>%
mutate(Total = n + y,
PC = y/Total) %>%
dplyr::select(subj, month, audio_video, y, PC) %>%
rename(n = y) %>%
left_join(demographics) %>%
mutate(Log.n = log(n+1))
## Speaker type
# Spread information across columns
speaker.type.n <- sibsdata %>%
group_by(subj, month, audio_video, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
rowwise() %>%
mutate(All.speakers = sum(c_across(ADM:UNC))) %>%  # not including unknown speakers from audio data
ungroup() %>%
mutate(Family.input = (MOT + FAT + SIBLING)) %>%
dplyr::select(subj, month, audio_video, MOT, FAT, SIBLING, Family.input, All.speakers)
speaker.type <- speaker.type.n %>%
gather(`MOT`,`FAT`, `SIBLING`, Family.input,
key = "Speaker",
value = "n") %>%
left_join(demographics) %>%
mutate(Log.n = log(n+1))
# CDI data: is the word the caregiver produces deemed to be 'learnable' in early acquisition (i.e. is it on the CDI)?
# queries <- sibsdata %>%            # with updated basic_levels.feather I need to first go through and classify words that are not in the original wordlist doc
#   left_join(wordlist) %>%
#   select(-CDIform, -object) %>%
#   filter(is.na(in_cdi) & speaker %in% c("MOT", "FAT", "SIBLING")) %>%
#   distinct(basic_level, .keep_all = TRUE) %>%
#   write_csv("cdi_queries_Apr22.csv")
in.cdi <- sibsdata %>%            # create dataset that classifies each basic_level as matching or not matching CDI list in wordlist
filter(speaker %in% c("MOT", "FAT", "SIBLING"))  %>%    # Remove other speakers from data
left_join(wordlist) %>%
select(-CDIform, -object) %>%
group_by(subj, month, audio_video, in_cdi) %>%
tally() %>%
spread(in_cdi, n) %>%
replace(is.na(.), 0) %>%
ungroup() %>%
rename(n = `TRUE`,
False = `FALSE`) %>%
mutate(Total = False + n,
PC = n/Total,
Log.n = log(n+1)) %>%
dplyr::select(subj, month, audio_video, n, PC, Total) %>%
left_join(demographics)                        # Combine with demographics data
sib.ages <- read_csv("Data/SiblingAges.csv") %>%   # Read in data showing age differences between subj and siblings
mutate(subj = factor(subj))
## Demographics: Updated March 2022 ##
# This is the main file containing all demographics data, incorporating some data from the demographics questionnaires at 6 and 18 months,
# mothers' PVT scores, and CDI data (productive vocabulary) from 6-18 months. THis also includes infant productions from audio and video recordings in the Seedlings corpus.
# This is the first script to generate when arranging data for the siblings analysis.
library(tidyverse)
library(forcats)
# Import data
PVT <- read_csv("Data/ParentPVT.csv") %>%
mutate(subj = factor(subj)) %>%
rename(PVTscore = uncorrected_standard_score) %>%
select(-ed_pvt)
CDI <- read_csv("Data/CDI.csv") %>%
mutate(subj = factor(subj)) %>%
rename(Total.words = CDI_TotalProd,
month = Month) %>%
mutate(Log.Totalwords = log(Total.words+1),
month = as.numeric(month)) %>%
select(subj, month, Total.words, Log.Totalwords)
chidata <- read_csv("Data/all_basiclevel_randsubj.csv") %>%   # Read in basic levels data and then join with CDI data to create a dataset of infant production
filter(speaker == 'CHI') %>%
dplyr::select(
basic_level,
audio_video,
subj,
month) %>%
mutate(basic_level = str_to_lower(basic_level),
subj = factor(subj))
CHIdata_tokens_video <- chidata %>%
filter(audio_video == "video") %>%
group_by(subj, month) %>%
tally() %>%
rename("tokens_video" = "n")
CHIdata_types_video <- chidata %>%
filter(audio_video == "video") %>%
group_by(subj, month) %>%
summarise(types_video = n_distinct(basic_level))
CHIdata_tokens_audio <- chidata %>%
filter(audio_video == "audio") %>%
group_by(subj, month) %>%
tally() %>%
rename("tokens_audio" = "n")
CHIdata_types_audio <- chidata %>%
filter(audio_video == "audio") %>%
group_by(subj, month) %>%
summarise(types_audio = n_distinct(basic_level))
ProductionData <- CDI %>%
left_join(CHIdata_tokens_video) %>%
left_join(CHIdata_types_video) %>%
left_join(CHIdata_tokens_audio) %>%
left_join(CHIdata_types_audio) %>%
mutate(tokens_video = ifelse(month < 18 & is.na(tokens_video), 0, tokens_video),
types_video = ifelse(month < 18 & is.na(types_video), 0, types_video),
tokens_audio = ifelse(month < 18 & is.na(tokens_audio), 0, tokens_audio),
types_audio = ifelse(month < 18 & is.na(types_audio), 0, types_audio))
## Demographics dataset: clean original data and join with PVT.csv
demographics <- read_csv("Data/demo_deid_cleaned.csv") %>%
mutate(subj = factor(subj)) %>%
dplyr::select(
subj,
sex,
maternal_education_18mos,
#maternal_employment_18mos,
#maternal_employment_hours_18mos,
#paternal_employment_18mos,
#paternal_employment_hours_18mos,
children_in_household_18mos_staff,
children_in_household_6mos_staff
) %>%
dplyr::rename(MOTedu = maternal_education_18mos  ## rename columns
#MOTwork = maternal_employment_18mos,
#MOTworkhours = maternal_employment_hours_18mos,
#FATwork = paternal_employment_18mos,
#FATworkhours = paternal_employment_hours_18mos
) %>%
mutate(MOTedu = factor(MOTedu),  # rename variables according to key in shared folder
MOTedu = fct_recode(MOTedu,
"High School" = "E",
"Some college" = "H",
"Assoc Degree" = "I",
"Bachelors Degree" = "J",
"Masters Degree" = "K",
"Doctorate" = "L"),
# MOTwork = ifelse(MOTwork %in% c("H","I"),"Other", MOTwork),       # Three mothers not classed as working FT, PT or Home; class as 'Other' or PT, as relevant
# MOTwork = ifelse(MOTwork == "B_E", "B", MOTwork),
# MOTwork = factor(MOTwork),
# MOTwork = fct_recode(MOTwork,
#                      "Full-time" = "A",
#                      "Part-time" = "B",
#                      "Home" = "C"),
# FATwork = ifelse(FATwork !="A" & FATwork !="B" & FATwork != "C", "Other",  # Recode fathers' work status so that fathers who don't work FT, PT,
#             FATwork),                                                      # or stay home (e.g. full-time students) are listed as 'other'
# FATwork = factor(FATwork),
# FATwork = fct_recode(FATwork,
#                      "Full-time" = "A",
#                      "Home" = "C"),
Siblings18 = children_in_household_18mos_staff - 1,   # new variable for sibling number at 18 months
Siblings6 = children_in_household_6mos_staff - 1,      # new variable for sibling number at 6 months
SibsYN = ifelse(Siblings6 == 0, "N", "Y"),             # binomial variable for slibling status (Y = siblings, N = No siblings)
SibGroup = factor(Siblings6),                          # new variable for sibling group, 0, 1, 2+ siblings
SibGroup = fct_recode(SibGroup,
"None" = "0",
"One" = "1",
"2+" = "2",
"2+" = "3",
"2+" = "4"),
SibGroup18 = factor(Siblings18),                          # new variable for sibling group, 0, 1, 2+ siblings
SibGroup18 = fct_recode(SibGroup18,
"None" = "0",
"One" = "1",
"2+" = "2",
"2+" = "3",
"2+" = "4"),
# SibsDiscrete = factor(Siblings),                       # discrete variable for sibling number at 6 months
# SibsDiscrete = fct_recode(SibsDiscrete,
#                       "None" = "0",
#                       "One" = "1",
#                       "Two" = "2",
#                       "Three" = "3",
#                       "Four" = "4"),
MOTedulevel = fct_recode(MOTedu,
"1" = "High School",
"2" = "Some college",
"3" = "Assoc Degree",
"4" = "Bachelors Degree",
"5" = "Masters Degree",
"6" = "Doctorate"),
MOTedulevel = as.numeric(MOTedulevel)) %>%
dplyr::select(-children_in_household_6mos_staff, -children_in_household_18mos_staff) %>%
left_join(PVT)   # merge with PVT data
#write_csv(demographics, "Data/Demographics.csv", append = FALSE, col_names = TRUE)
SiblingsData <- demographics %>%
left_join(ProductionData) %>%
dplyr::select(                                      # re-order columns
subj,
month,
sex,
#MOTedu,
MOTedulevel,
age_mom,
PVTscore,
#MOTwork,
#MOTworkhours,
#FATwork,
#FATworkhours,
SibsYN,
Siblings6,
Siblings18,
SibGroup,
SibGroup18,
#SibsDiscrete,
Total.words,
Log.Totalwords,
tokens_video,
types_video,
tokens_audio,
types_audio)  %>%
mutate(Log.tokens_video = log(tokens_video+1),
Log.types_video = log(types_video+1),
Log.tokens_audio = log(tokens_audio+1),
Log.types_audio = log(types_audio+1))
# save
#write_csv(SiblingsData, "Data/SiblingsData.csv", append = FALSE, col_names = TRUE)
PVT <- read_csv("Data/ParentPVT.csv") %>%
mutate(subj = factor(subj)) %>%
rename(PVTscore = uncorrected_standard_score) %>%
select(-ed_pvt)
CDI <- read_csv("Data/CDI.csv") %>%
mutate(subj = factor(subj)) %>%
rename(Total.words = CDI_TotalProd,
month = Month) %>%
mutate(Log.Totalwords = log(Total.words+1),
month = as.numeric(month)) %>%
select(subj, month, Total.words, Log.Totalwords)
chidata <- read_csv("Data/all_basiclevel_randsubj.csv") %>%   # Read in basic levels data and then join with CDI data to create a dataset of infant production
filter(speaker == 'CHI') %>%
dplyr::select(
basic_level,
audio_video,
subj,
month) %>%
mutate(basic_level = str_to_lower(basic_level),
subj = factor(subj))
CHIdata_tokens_video <- chidata %>%
filter(audio_video == "video") %>%
group_by(subj, month) %>%
tally() %>%
rename("tokens_video" = "n")
CHIdata_types_video <- chidata %>%
filter(audio_video == "video") %>%
group_by(subj, month) %>%
summarise(types_video = n_distinct(basic_level))
CHIdata_tokens_audio <- chidata %>%
filter(audio_video == "audio") %>%
group_by(subj, month) %>%
tally() %>%
rename("tokens_audio" = "n")
CHIdata_types_audio <- chidata %>%
filter(audio_video == "audio") %>%
group_by(subj, month) %>%
summarise(types_audio = n_distinct(basic_level))
ProductionData <- CDI %>%
left_join(CHIdata_tokens_video) %>%
left_join(CHIdata_types_video) %>%
left_join(CHIdata_tokens_audio) %>%
left_join(CHIdata_types_audio) %>%
mutate(tokens_video = ifelse(month < 18 & is.na(tokens_video), 0, tokens_video),
types_video = ifelse(month < 18 & is.na(types_video), 0, types_video),
tokens_audio = ifelse(month < 18 & is.na(tokens_audio), 0, tokens_audio),
types_audio = ifelse(month < 18 & is.na(types_audio), 0, types_audio))
chidata <- read_csv("Data/all_basiclevel_randsubj.csv") %>%   # Read in basic levels data and then join with CDI data to create a dataset of infant production
filter(speaker == 'CHI') %>%
dplyr::select(
basic_level,
audio_video,
subj,
month) %>%
mutate(basic_level = str_to_lower(basic_level),
subj = factor(subj),
month = as.numeric(month))
CHIdata_tokens_video <- chidata %>%
filter(audio_video == "video") %>%
group_by(subj, month) %>%
tally() %>%
rename("tokens_video" = "n")
CHIdata_types_video <- chidata %>%
filter(audio_video == "video") %>%
group_by(subj, month) %>%
summarise(types_video = n_distinct(basic_level))
CHIdata_tokens_audio <- chidata %>%
filter(audio_video == "audio") %>%
group_by(subj, month) %>%
tally() %>%
rename("tokens_audio" = "n")
CHIdata_types_audio <- chidata %>%
filter(audio_video == "audio") %>%
group_by(subj, month) %>%
summarise(types_audio = n_distinct(basic_level))
ProductionData <- CDI %>%
left_join(CHIdata_tokens_video) %>%
left_join(CHIdata_types_video) %>%
left_join(CHIdata_tokens_audio) %>%
left_join(CHIdata_types_audio) %>%
mutate(tokens_video = ifelse(month < 18 & is.na(tokens_video), 0, tokens_video),
types_video = ifelse(month < 18 & is.na(types_video), 0, types_video),
tokens_audio = ifelse(month < 18 & is.na(tokens_audio), 0, tokens_audio),
types_audio = ifelse(month < 18 & is.na(types_audio), 0, types_audio))
demographics <- read_csv("Data/demo_deid_cleaned.csv") %>%
mutate(subj = factor(subj)) %>%
dplyr::select(
subj,
sex,
maternal_education_18mos,
#maternal_employment_18mos,
#maternal_employment_hours_18mos,
#paternal_employment_18mos,
#paternal_employment_hours_18mos,
children_in_household_18mos_staff,
children_in_household_6mos_staff
) %>%
dplyr::rename(MOTedu = maternal_education_18mos  ## rename columns
#MOTwork = maternal_employment_18mos,
#MOTworkhours = maternal_employment_hours_18mos,
#FATwork = paternal_employment_18mos,
#FATworkhours = paternal_employment_hours_18mos
) %>%
mutate(MOTedu = factor(MOTedu),  # rename variables according to key in shared folder
MOTedu = fct_recode(MOTedu,
"High School" = "E",
"Some college" = "H",
"Assoc Degree" = "I",
"Bachelors Degree" = "J",
"Masters Degree" = "K",
"Doctorate" = "L"),
# MOTwork = ifelse(MOTwork %in% c("H","I"),"Other", MOTwork),       # Three mothers not classed as working FT, PT or Home; class as 'Other' or PT, as relevant
# MOTwork = ifelse(MOTwork == "B_E", "B", MOTwork),
# MOTwork = factor(MOTwork),
# MOTwork = fct_recode(MOTwork,
#                      "Full-time" = "A",
#                      "Part-time" = "B",
#                      "Home" = "C"),
# FATwork = ifelse(FATwork !="A" & FATwork !="B" & FATwork != "C", "Other",  # Recode fathers' work status so that fathers who don't work FT, PT,
#             FATwork),                                                      # or stay home (e.g. full-time students) are listed as 'other'
# FATwork = factor(FATwork),
# FATwork = fct_recode(FATwork,
#                      "Full-time" = "A",
#                      "Home" = "C"),
Siblings18 = children_in_household_18mos_staff - 1,   # new variable for sibling number at 18 months
Siblings6 = children_in_household_6mos_staff - 1,      # new variable for sibling number at 6 months
SibsYN = ifelse(Siblings6 == 0, "N", "Y"),             # binomial variable for slibling status (Y = siblings, N = No siblings)
SibGroup = factor(Siblings6),                          # new variable for sibling group, 0, 1, 2+ siblings
SibGroup = fct_recode(SibGroup,
"None" = "0",
"One" = "1",
"2+" = "2",
"2+" = "3",
"2+" = "4"),
SibGroup18 = factor(Siblings18),                          # new variable for sibling group, 0, 1, 2+ siblings
SibGroup18 = fct_recode(SibGroup18,
"None" = "0",
"One" = "1",
"2+" = "2",
"2+" = "3",
"2+" = "4"),
# SibsDiscrete = factor(Siblings),                       # discrete variable for sibling number at 6 months
# SibsDiscrete = fct_recode(SibsDiscrete,
#                       "None" = "0",
#                       "One" = "1",
#                       "Two" = "2",
#                       "Three" = "3",
#                       "Four" = "4"),
MOTedulevel = fct_recode(MOTedu,
"1" = "High School",
"2" = "Some college",
"3" = "Assoc Degree",
"4" = "Bachelors Degree",
"5" = "Masters Degree",
"6" = "Doctorate"),
MOTedulevel = as.numeric(MOTedulevel)) %>%
dplyr::select(-children_in_household_6mos_staff, -children_in_household_18mos_staff) %>%
left_join(PVT)   # merge with PVT data
SiblingsData <- demographics %>%
left_join(ProductionData) %>%
dplyr::select(                                      # re-order columns
subj,
month,
sex,
#MOTedu,
MOTedulevel,
age_mom,
PVTscore,
#MOTwork,
#MOTworkhours,
#FATwork,
#FATworkhours,
SibsYN,
Siblings6,
Siblings18,
SibGroup,
SibGroup18,
#SibsDiscrete,
Total.words,
Log.Totalwords,
tokens_video,
types_video,
tokens_audio,
types_audio)  %>%
mutate(Log.tokens_video = log(tokens_video+1),
Log.types_video = log(types_video+1),
Log.tokens_audio = log(tokens_audio+1),
Log.types_audio = log(types_audio+1))
library(papaja)
library(tidyverse)
library(dplyr)
library(tibble)
library(lmerTest)
library(afex)
#library(citr)
library(feather)
source("DataGathering.R")
source("Tables.R")
stat_sum_df <- function(fun, geom="crossbar", ...) {
stat_summary(fun.data = fun, colour = "red", geom = geom, width = 0.2, ...)
}
