table.data.summary <- table.data.summary.mean %>% left_join(table.data.summary.sd) %>%
select(Variable, `none m`, `none sd`, `1 m`, `1 sd`, `2 m`, `2 sd`) %>%
mutate(Variable=factor(Variable, levels = c("Productive Vocabulary 18m (CDI)",
"N Input utterances, 10-17 months",
"% object presence in input, 10-17 months"))) %>%
arrange(Degree)
table.data.summary <- table.data.summary.mean %>% left_join(table.data.summary.sd) %>%
select(Variable, `none m`, `none sd`, `1 m`, `1 sd`, `2 m`, `2 sd`) %>%
mutate(Variable=factor(Variable, levels = c("Productive Vocabulary 18m (CDI)",
"N Input utterances, 10-17 months",
"% object presence in input, 10-17 months"))) %>%
arrange(Variable)
View(table.data.summary)
sib.presence.table.data.summary
object.presence.summary$mean.object
library(papaja)
library(tidyverse)
library(dplyr)
library(tibble)
library(lmerTest)
library(afex)
#library(citr)
library(feather)
library(ggcorrplot)
library(corrplot)
library(kableExtra)
source("DataGathering.R")
# function for calculating R^2:
r2.corr.mer <- function(m) {
lmfit <-  lm(model.response(model.frame(m)) ~ fitted(m))
summary(lmfit)$r.squared
}
speaker.type.no.twins <- speaker.type %>% filter(subj != 424)
speaker.type.model.null.no.twins.age <- lmerTest::lmer(Log.n ~ sex + (1|subj),
data=subset(speaker.type.no.twins, audio_video == "video" &
caregiver == "FAMILY"),
REML=FALSE)
speaker.type.model.no.twins.age <- lmerTest::lmer(Log.n ~ month + sex + (1|subj),
data=subset(speaker.type.no.twins, audio_video == "video" &
caregiver == "FAMILY"),
REML=FALSE)
anove(speaker.type.model.null, speaker.type.model.null.no.twins.age)
anova(speaker.type.model.null, speaker.type.model.null.no.twins.age)
speaker.type.model.null.no.twins.age <- lmerTest::lmer(Log.n ~ sex + (1|subj),
data=subset(speaker.type.no.twins, audio_video == "video" &
caregiver == "FAMILY"),
REML=FALSE)
speaker.type.model.no.twins.age <- lmerTest::lmer(Log.n ~ month + sex + (1|subj),
data=subset(speaker.type.no.twins, audio_video == "video" &
caregiver == "FAMILY"),
REML=FALSE)
anova(speaker.type.model.null.no.twins.age, speaker.type.model.no.twins.age)
speaker.type.model.null.no.twins.sex <- lmerTest::lmer(Log.n ~ month + (1|subj),
data=subset(speaker.type.no.twins, audio_video == "video" &
caregiver == "FAMILY"),
REML=FALSE)
speaker.type.model.no.twins.ksex <- lmerTest::lmer(Log.n ~ month + sex + (1|subj),
data=subset(speaker.type.no.twins, audio_video == "video" &
caregiver == "FAMILY"),
REML=FALSE)
speaker.type.model.no.twins.sex <- lmerTest::lmer(Log.n ~ month + sex + (1|subj),
data=subset(speaker.type.no.twins, audio_video == "video" &
caregiver == "FAMILY"),
REML=FALSE)
anova(speaker.type.model.null.no.twins.sex, speaker.type.model.no.twins.sex) # sig effect for age
object.presence.model.no.twins.age <- lmerTest::lmer(PC ~ sex + (1|subj),
data=subset(object.presence.no.twins,  audio_video == "video"),
REML=FALSE)
object.presence.no.twins <- object.presence %>% filter(subj != 424)
object.presence.model.no.twins.age <- lmerTest::lmer(PC ~ sex + (1|subj),
data=subset(object.presence.no.twins,  audio_video == "video"),
REML=FALSE)
object.presence.model.no.twins.age.null <- lmerTest::lmer(PC ~ month + sex + (1|subj),
data=subset(object.presence.no.twins,
audio_video == "video"),
REML=FALSE)
anova(object.presence.model.no.twins.age, object.presence.model.no.twins.age.null)
object.presence.model.no.twins.sex <- lmerTest::lmer(PC ~ month + (1|subj),
data=subset(object.presence.no.twins,  audio_video == "video"),
REML=FALSE)
object.presence.model.no.twins.sex.null <- lmerTest::lmer(PC ~ month + sex + (1|subj),
data=subset(object.presence.no.twins,
audio_video == "video"),
REML=FALSE)
anova(object.presence.model.no.twins.sex, object.presence.model.no.twins.sex.null) # sig effect
age.test.input_anova
sex.test.input_anova
age.test.OP_anova
sex.test.OP_anova
age.test.input <- lmer(Log.n ~ month + (1|subj), data = subset(speaker.type, caregiver == "FAMILY" & audio_video == "audio"), REML=FALSE)
age.test.input.null <- lmer(Log.n ~ 1 + (1|subj), data = subset(speaker.type, caregiver == "FAMILY" & audio_video == "audio"), REML=FALSE)
age.test.input_anova <- anova(age.test.input, age.test.input.null) %>% # p<.001
rename("pval" = `Pr(>Chisq)`) # significant effect of age on input
age.test.input_anova
sex.test.input <- lmer(Log.n ~ sex + (1|subj), data = subset(speaker.type, caregiver == "FAMILY" & audio_video == "audio"), REML=FALSE)
sex.test.input.null <- lmer(Log.n ~ 1 + (1|subj), data = subset(speaker.type, caregiver == "FAMILY" & audio_video == "audio"), REML=FALSE)
sex.test.input_anova <- anova(sex.test.input, sex.test.input.null) %>% # NS
rename("pval" = `Pr(>Chisq)`)
sex.test.input_anova
age.test.OP <- lmer(PC ~ month + (1|subj), data = subset(object.presence, audio_video == "audio"), REML=FALSE)
age.test.OP.null <- lmer(PC ~ 1 + (1|subj), data = subset(object.presence, audio_video == "audio"), REML=FALSE)
age.test.OP_anova <- anova(age.test.OP, age.test.OP.null) %>% # p<.001
rename("pval" = `Pr(>Chisq)`)
age.test.OP_anova
sex.test.OP <- lmer(Log.n ~ sex + (1|subj), data = subset(object.presence, audio_video == "audio"), REML=FALSE)
sex.test.OP.null <- lmer(Log.n ~ 1 + (1|subj), data = subset(object.presence, audio_video == "audio"), REML=FALSE)
sex.test.OP_anova <- anova(sex.test.OP, sex.test.OP.null) %>% #NS
rename("pval" = `Pr(>Chisq)`)
sex.test.OP_anova
speaker.type.model.null.no.twins.age <- lmerTest::lmer(Log.n ~ 1 + (1|subj),
data=subset(speaker.type.no.twins, audio_video == "video" &
caregiver == "FAMILY"),
REML=FALSE)
speaker.type.model.no.twins.age <- lmerTest::lmer(Log.n ~ month + (1|subj),
data=subset(speaker.type.no.twins, audio_video == "video" &
caregiver == "FAMILY"),
REML=FALSE)
anova(speaker.type.model.null.no.twins.age, speaker.type.model.no.twins.age) # sig effect for age
speaker.type.model.null.no.twins.sex <- lmerTest::lmer(Log.n ~ 1 + (1|subj),
data=subset(speaker.type.no.twins, audio_video == "video" &
caregiver == "FAMILY"),
REML=FALSE)
speaker.type.model.no.twins.sex <- lmerTest::lmer(Log.n ~ sex + (1|subj),
data=subset(speaker.type.no.twins, audio_video == "video" &
caregiver == "FAMILY"),
REML=FALSE)
anova(speaker.type.model.null.no.twins.sex, speaker.type.model.no.twins.sex) # ns
object.presence.model.no.twins.age <- lmerTest::lmer(PC ~ 1 + (1|subj),
data=subset(object.presence.no.twins,  audio_video == "video"),
REML=FALSE)
object.presence.model.no.twins.age.null <- lmerTest::lmer(PC ~ month + (1|subj),
data=subset(object.presence.no.twins,
audio_video == "video"),
REML=FALSE)
anova(object.presence.model.no.twins.age, object.presence.model.no.twins.age.null) # sig effect
object.presence.model.no.twins.sex <- lmerTest::lmer(PC ~ 1 + (1|subj),
data=subset(object.presence.no.twins,  audio_video == "video"),
REML=FALSE)
object.presence.model.no.twins.sex.null <- lmerTest::lmer(PC ~ sex + (1|subj),
data=subset(object.presence.no.twins,
audio_video == "video"),
REML=FALSE)
anova(object.presence.model.no.twins.sex, object.presence.model.no.twins.sex.null) # ns
speaker.type.model.0.discrete <- lmerTest::lmer(Log.n ~ 1 + (1|subj), data=subset(speaker.type,
audio_video == "video" &
caregiver == "FAMILY"),
REML=FALSE)
speaker.type.model.month.discrete <- lmerTest::lmer(Log.n ~ month + (1|subj), data=subset(speaker.type,
audio_video == "video" &
caregiver == "FAMILY"),
REML=FALSE)
speaker.type.model.sex.discrete <- lmerTest::lmer(Log.n ~ sex + (1|subj), data=subset(speaker.type,
audio_video == "video" &
caregiver == "FAMILY"),
REML=FALSE)
anova(speaker.type.model.0.discrete,speaker.type.model.month.discrete) # significant
anova(speaker.type.model.0.discrete,speaker.type.model.sex.discrete) # not significant
object.presence.model.null.discrete <- lmerTest::lmer(PC ~ 1 + (1|subj), data=subset(object.presence,
audio_video == "video"),
REML=FALSE)
object.presence.model.month.discrete <- lmerTest::lmer(PC ~ month + (1|subj), data=subset(object.presence,
audio_video == "video"),
REML=FALSE)
object.presence.model.sex.discrete <- lmerTest::lmer(PC ~ sex + (1|subj), data=subset(object.presence,
audio_video == "video"),
REML=FALSE)
anova(object.presence.model.null.discrete, object.presence.model.month.discrete)# significant
anova(object.presence.model.null.discrete, object.presence.model.sex.discrete)  # not significant
speaker.type.red <- speaker.type %>% filter(subj != 738)
speaker.type.model.0.red <- lmerTest::lmer(Log.n ~ 1 + (1|subj), data=subset(speaker.type.red,
audio_video == "video" &
caregiver == "FAMILY"),
REML=FALSE)
speaker.type.model.age.red <- lmerTest::lmer(Log.n ~ month + (1|subj), data=subset(speaker.type.red,
audio_video == "video" &
caregiver == "FAMILY"),
REML=FALSE)
speaker.type.model.sex.red <- lmerTest::lmer(Log.n ~ sex + (1|subj), data=subset(speaker.type.red,
audio_video == "video" &
caregiver == "FAMILY"),
REML=FALSE)
anova(speaker.type.model.0.red, speaker.type.model.age.red)
anova(speaker.type.model.0.red, speaker.type.model.sex.red) # significant
object.presence.red <- object.presence %>% filter(subj != 738)
object.presence.model.red.0 <- lmerTest::lmer(PC ~ 1 + (1|subj), data=subset(object.presence.red,
audio_video == "video"),
REML=FALSE)
object.presence.model.red.age <- lmerTest::lmer(PC ~ month + (1|subj), data=subset(object.presence.red,
audio_video == "video"),
REML=FALSE)
object.presence.model.red.sex <- lmerTest::lmer(PC ~ sex + (1|subj), data=subset(object.presence.red,
audio_video == "video"),
REML=FALSE)
anova(object.presence.model.red.0, object.presence.model.red.age)
object.presence.model.null.red <- lmerTest::lmer(PC ~ month + (1|subj), data=subset(object.presence.red,
audio_video == "video"),
REML=FALSE)
anova(object.presence.model.red.0, object.presence.model.red.sex) # significan
Figure.input.age
Figure.input.age <- ggplot(data = subset(speaker.type, caregiver == "FAMILY" & audio_video == "video"),
mapping = aes(x=as.numeric(month), y=Log.n)) +
geom_point(aes(colour = SibGroup), shape = 1, size = 3, position = position_dodge(.2)) +
geom_smooth(aes(colour = SibGroup, fill = SibGroup),size=2) +
ylab('Total number of words heard in input (log-transformed)') +
xlab('Age in Months') +
scale_x_continuous(breaks = c(6:18)) +
scale_y_continuous(breaks = c(0, log(11), log(51), log(151), log(301)), labels = c(0, 10, 50, 150, 300)) +
theme_bw() +
theme(axis.text=element_text(size=10),
text = element_text(size=10),
legend.position = c(.05, .9),
legend.title = element_blank(),
legend.background = element_rect(fill='transparent')) +
stat_summary(fun.data=mean_cl_boot, geom="pointrange",
aes(fill = SibGroup), color = "black", shape = 24,
position = position_dodge(.2))
Figure.input.age
Figure.input.age <- ggplot(data = subset(speaker.type, caregiver == "FAMILY" & audio_video == "video"),
mapping = aes(x=as.numeric(month), y=Log.n)) +
geom_point(aes(colour = SibGroup), shape = 1, size = 3, position = position_dodge(.2)) +
geom_smooth(aes(colour = SibGroup, fill = SibGroup),size=2) +
ylab('Total number of words heard in input (log-transformed)') +
xlab('Age in Months') +
scale_x_continuous(breaks = c(6:18)) +
scale_y_continuous(breaks = c(0, log(11), log(51), log(151), log(301)), labels = c(0, 10, 50, 150, 300)) +
theme_bw() +
theme(axis.text=element_text(size=10),
text = element_text(size=10),
legend.position = c(0.05, 0.1),
legend.title = element_blank(),
legend.background = element_rect(fill='transparent')) +
stat_summary(fun.data=mean_cl_boot, geom="pointrange",
aes(fill = SibGroup), color = "black", shape = 24,
position = position_dodge(.2))
Figure.input.age
View(speaker.type)
## Data gathering: Updated October 2023 ##
# This file extracts the relevant data from the basiclevels feather spreadsheet in the Seedlings folder
# Three main variables are extracted and joined with the Demographics spreadsheet: object presence, utterance type, and speaker type.
# This script also summarizes in.cdi data. This relates to the 'ease of acquisition' variable in the analysis.
source("Demographics.R")
library(tidyverse)
library(readr)
library(feather)
library(stringi)
library(stringr)
library(forcats)
# work from basic levels spreadsheet
sibsdata <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
filter(#audio_video =='video',   # Only use video data
subj != 351 &                  # filter out one twin
!(speaker %in% c('CHI', #remove infant productions
"EFA", "EFB", "EFS", "EFE", # exclude female experimenters
"EMM", # exclude male experimenters
"MBT", # exclude mother, brother and TV in unison
"GRY", # exclude grandfather and toy in unison
"CHY"))) %>%  # exclude child and toy in unison
dplyr::select(
audio_video,
utterance_type,
speaker,
object_present,
basic_level,
subj,
month) %>%
mutate(basic_level = str_to_lower(basic_level),
speaker = factor(speaker),
speaker = fct_collapse(speaker,
"SIBLING" = c("BRO", "BR1", "BR2", "SIS", "SI1", "SI2",
"BTY", "SCU", "STY", "SIU"),
"AUNT" = c("AUN", "AU2", "AU3", "AU4"),
"UNCLE" = c("UN2", "UNC", "GUN", "UN3", "UN4"),
"BABYSITTER" = c("BSE", "BSJ", "BSK", "BSS", "BSC", "BSB", "BSD", "BSL"),
"FAT" = c("FTS", "FTY", "MFT", "MFV"), # 2 instances of MFT and MFV in the data, in both cases MOT is CG1 and MFT/MFV CG2
"GRP" = c("GP2", "GRP", "GGP", "SGP"),
"GRM" = c("GRA", "GTY", "GRM", "GGM"),
"MOT" = c("MBR", "MCU", "MIS", "MTY", "MTT"),
#"MOT+FAT" = c("MFT", "MFV"),
"COUSIN" = c("MC2", "COU", "FCO", "MCO", "FC3", "MC3", "CCU", "FC2"),
"OTHER ADULT" = c("AF2", "AF4", "AF5", "AF6", "AF7", "AF8", "AFA",
"AFB", "AFC", "AFD", "AFH", "AFJ", "AFL", "AFM",
"AFP", "AFR", "AFS", "AFT", "AM1", "AM2", "AM3", "AM6",
"AMB","AMC","AMG","AMR", "X12", "AF1", "AF3", "AF9", "AFE",
"AFG", "AFK", "AFN", "AFY", "AM4", "AM5", "AMA", "AME",
"AMI", "AMJ", "AMK", "AMM", "AMS", "AMT", "ADM"),
"OTHER CHILD" = c("CFC", "CFR", "CFZ",
"CM1", "CM2", "CF1", "CFA", "CFB", "CFD", "CFE", "CFH",
"CFK", "CFL", "CFM","CFP", "CFS", "CH1", "CMD", "CME",
"CMH", "CMJ", "CML", "CMM", "CMO","CMT")),  # rename speakers
subj = factor(subj),
month = as.numeric(month)) %>%
filter(month >9)
n_excluded <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
mutate(month = as.numeric(month)) %>%
filter(audio_video =='video' &   # Only use video data
subj != 351 &                  # filter out one twin
month > 9 &
(speaker %in% c("TOY",
"EFA", "EFB", "EFS", "EFE", # exclude female experimenters
"EMM", # exclude male experimenters
"MBT", # exclude mother, brother and TV in unison
"GRY" # exclude grandfather and toy in unison
) |
(grepl("TV", speaker)))) %>%
tally()
#levels(sibsdata$speaker)
#"ADM" # not sure
#    "BBT"    # not sure
# "BIS"  # not sure
# "GR2"     # not sure
#  "GRF"  # not sure
# "MMT" # not sure
# "MOY"     # not sure
# "MST"    # not sure
# speakers in unison
# "FBR"   # father and brother in unison
# "FCU"    # father and child in unison
# "FGA" # father and grandma in unison
# "GMS" #grandmother and sister in unison
# "MFU"   #mother and adult female in unison
# "MGG"   # grandmother and grandfather in unison (maternal)
# "MGM"  # mother and grandmother in unison
# "MGP"   # mother and grandfather in unison
# "SST"   # sisters in unison
# "UAU"   # uncle and aunt in unison
# "UMT"   # mother and uncle in unison
# "X10"  "X11"  "X13"    # other adults - keep these as 'additional input' rather than coding as 'other adult'
## Speaker type
speaker.type.all <- sibsdata %>%
group_by(subj, month, audio_video, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY, -UAT) %>% # remove anything with TV and toy (UAT - aunt + uncle + TV)
replace(is.na(.), 0) %>%
rowwise() %>%
mutate(All.speakers = sum(c_across(`OTHER ADULT`:X13))) %>%
dplyr::select(subj, month, audio_video, All.speakers)
speaker.type.cg1 <- sibsdata %>%
filter((!grepl("TV", speaker)) & !(speaker %in% c("TOY", "SIBLING"
, "OTHER CHILD", "COUSIN"
))) %>%
group_by(subj, month, audio_video, speaker) %>%
tally() %>%
slice_max(n) %>%
mutate(caregiver = "CG1")
speaker.type.cg2 <- sibsdata %>%
filter((!grepl("TV", speaker)) &
!(speaker %in% c("TOY", "SIBLING",
"OTHER CHILD", "COUSIN",
"GRO"))) %>% # remove speech from other kids and
# groups ("GRO" - multiple speakers in unison - occured as CG2 for one infant)
group_by(subj, month, audio_video, speaker) %>%
tally() %>%
group_by(subj, month, audio_video) %>%
arrange(desc(n)) %>%
slice(2) %>%
mutate(caregiver = "CG2")
speaker.type.sib <- sibsdata %>%
group_by(subj, month, audio_video, speaker) %>%
filter(speaker == "SIBLING") %>%
tally() %>%
mutate(caregiver = "SIB")
speaker.type.n <- rbind(speaker.type.cg1, speaker.type.cg2, speaker.type.sib)
speaker.type.household <- speaker.type.n %>%
group_by(subj, month, audio_video) %>%
summarise(n = sum(n)) %>%
mutate(caregiver = "FAMILY")
speaker.type <- rbind(speaker.type.n, speaker.type.household) %>%
left_join(SiblingsData) %>%
mutate(Log.n = log(n+1),
speaker = as.character(speaker),
speaker = ifelse(caregiver == "FAMILY", "Total.input", speaker))
all.speaker.data <- speaker.type.household %>% left_join(speaker.type.all) %>%
filter(audio_video == "video") %>%
group_by(subj, month) %>%
mutate(other.input = All.speakers - n,
prop.other = other.input/All.speakers) %>%
ungroup()
## Object presence: How much caregiver input relates to objects that are present in the infant's environment?
object.presence <- sibsdata %>%
left_join(speaker.type.n) %>%
filter(!is.na(caregiver)) %>%
filter(object_present %in%
c("y", "n")) %>%
group_by(subj, month, audio_video, object_present) %>%
tally() %>%
spread(object_present, n) %>%
replace(is.na(.), 0) %>%
ungroup() %>%
mutate(Total = n + y,
PC = y/Total) %>%
dplyr::select(subj, month, audio_video, y, PC) %>%
rename(n = y) %>%
left_join(demographics) %>%
mutate(Log.n = log(n+1))
#check <- object.presence %>% group_by(subj, audio_video) %>% tally() %>% filter(audio_video == "video" & n<12)
# 129 has no video data in month 6 but that's not a problem because we start at month 10
# how many instances of object presence were unclear?
object.presence.unsure <- sibsdata %>%
filter(audio_video == "video") %>%
left_join(speaker.type.n) %>%
filter(!is.na(caregiver)) %>%
filter(object_present %in%
c("y", "n", "u")) %>%
group_by(subj, audio_video, object_present) %>%
tally() %>%
spread(object_present, n) %>%
replace(is.na(.), 0) %>%
ungroup() %>%
mutate(Total = n + y + u,
PCu = u/Total) %>%
summarise(totalu = sum(u),
meanu = (mean(PCu))*100)
sib.ages <- read_csv("Data/SiblingAges.csv") %>%   # Read in data showing age differences between subj and siblings
mutate(subj = factor(subj)) %>%
filter( subj != 351)                  # filter out one twinv
# dataframe to show which recordings included speech from a sibling
sib.presence <- speaker.type %>% filter(audio_video == "video") %>%
dplyr::select(subj, month, caregiver, n, SibGroup) %>%
group_by(subj, month) %>%
pivot_wider(names_from = caregiver, values_from = n) %>%
mutate(sib.present = ifelse((SibGroup != "None" & !is.na(SIB)), "Sibling present", "Sibling not present"))
# dataframe to test for correlations between home-recordings and CDI word productions
#grabbing sibgroup and CDI from SiblingsData df
SibGroup_cdi <- SiblingsData %>%
filter(month==18) %>%
dplyr::select(subj, SibGroup,Total.words) %>%
rename(CDI = Total.words)
#grabbing type and token counts overall and for CHI
types_tokens <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
mutate(month = as.numeric(month)) %>%
filter(!(speaker %in% c('CHI', "EFA", "EFB", "EFS", "EMM", "EFE", "GRO", "MBT")) &  # remove infant productions
subj != 351 &
month > 9
) %>%
dplyr::group_by(subj) %>%
mutate(subj = as.factor(subj)) %>%
summarise(numtokens = n(),
numtypes = n_distinct(basic_level)) %>%
replace(is.na(.), 0)
types_tokens_CHI <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
mutate(month = as.numeric(month)) %>%
filter(speaker == "CHI" &
subj != 351 &
month > 9
) %>%
dplyr::group_by(subj) %>%
mutate(subj = as.factor(subj)) %>%
summarise(numtokens_chi = n(),
numtypes_chi = n_distinct(basic_level)) %>%
replace(is.na(.), 0)
types_tokens_overall_CDI_sibgroup<- types_tokens %>%
left_join(types_tokens_CHI) %>%
replace(is.na(.), 0) %>% # to replace the NAs for input
mutate(subj=as.factor(subj)) %>%
left_join(SibGroup_cdi)
#write_csv(types_tokens_overall_CDI_sibgroup, "Data/types_tokens_overall_CDI_sibgroup.csv")
View(speaker.type)
library(papaja)
library(tidyverse)
library(dplyr)
library(tibble)
library(lmerTest)
library(afex)
#library(citr)
library(feather)
library(ggcorrplot)
library(corrplot)
library(kableExtra)
source("DataGathering.R")
# function for calculating R^2:
r2.corr.mer <- function(m) {
lmfit <-  lm(model.response(model.frame(m)) ~ fitted(m))
summary(lmfit)$r.squared
}
Figure.input.age <- ggplot(data = subset(speaker.type, caregiver == "FAMILY" & audio_video == "video"),
mapping = aes(x=as.numeric(month), y=n)) +
geom_point(aes(colour = SibGroup), shape = 1, size = 3, position = position_dodge(.2)) +
geom_smooth(aes(colour = SibGroup, fill = SibGroup),size=2) +
ylab('Total number of words heard in input') +
xlab('Age in Months') +
scale_x_continuous(breaks = c(6:18)) +
theme_bw() +
theme(axis.text=element_text(size=10),
text = element_text(size=10),
legend.position = c(0.07, 0.9),
legend.title = element_blank(),
legend.background = element_rect(fill='transparent')) +
stat_summary(fun.data=mean_cl_boot, geom="pointrange",
aes(fill = SibGroup), color = "black", shape = 24,
position = position_dodge(.2))
Figure.input.age <- ggplot(data = subset(speaker.type, caregiver == "FAMILY" & audio_video == "video"),
mapping = aes(x=as.numeric(month), y=n)) +
geom_point(aes(colour = SibGroup), shape = 1, size = 3, position = position_dodge(.2)) +
geom_smooth(aes(colour = SibGroup, fill = SibGroup),size=2) +
ylab('Total number of words heard in input') +
xlab('Age in Months') +
scale_x_continuous(breaks = c(6:18)) +
theme_bw() +
theme(axis.text=element_text(size=10),
text = element_text(size=10),
legend.position = c(0.07, 0.9),
legend.title = element_blank(),
legend.background = element_rect(fill='transparent')) +
stat_summary(fun.data=mean_cl_boot, geom="pointrange",
aes(fill = SibGroup), color = "black", shape = 24,
position = position_dodge(.2))
Figure.input.age
We re-plotted Figures 2 and 3 from the main paper with age on the x-axis, to determine whether there was any notable age-related changes in these variables.
# Three main variables are extracted and joined with the Demographics spreadsheet: object presence, utterance type, and speaker type.
# This script also summarizes in.cdi data. This relates to the 'ease of acquisition' variable in the analysis.
Figure.input.age
