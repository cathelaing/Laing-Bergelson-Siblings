basic_level,
subj,
month) %>%
mutate(basic_level = str_to_lower(basic_level),
speaker = factor(speaker),
speaker = fct_collapse(speaker,
"SIBLING" = c("BRO", "BR1", "BR2", "SIS", "SI1", "SI2")),  # rename speakers
subj = factor(subj))
wordlist <- read_csv("Data/in_cdi_Wordlist.csv") # Read in CDI wordlist that matches sibsdata$basic_level with words on the CDI
## Utterance type: What kinds of utterances occur in the infants' inputs?
utterance.type.n <- sibsdata %>%
filter(speaker %in% c("MOT", "FAT", "SIBLING"))  %>%    # Remove other speakers from data
filter(utterance_type %in%
c("d", "i", "n", "q", "r", "s", "u"))  %>%
group_by(subj, month, utterance_type) %>%
tally() %>%
spread(utterance_type, n) %>%
ungroup() %>%
replace(is.na(.), 0)
# Turn rows to columns for both N and PC, create new datasets to keep it manageable
utterance.type.PC <- utterance.type.n %>%
mutate(Total.input = (d + i + n + q + r + s + u),         # create % of each utterance type
PCd = d/Total.input,
PCi = i/Total.input,
PCn = n/Total.input,
PCq = q/Total.input,
PCr = r/Total.input,
PCs = s/Total.input,
PCu = u/Total.input) %>%
dplyr::select(subj, month, PCd,PCi, PCn, PCq, PCr, PCs, PCu) %>%
gather(`PCd`,`PCi`, `PCn`, `PCq`, `PCr`, `PCs`, `PCu`,
key = "TypePC",
value = "PC") %>%
dplyr::select(subj, month, TypePC, PC) %>%  # Remove unnecessary columns
mutate(TypePC = factor(TypePC),
TypePC = fct_recode(TypePC,
"d" = "PCd",
"i" = "PCi",
"n" = "PCn",
"q" = "PCq",
"r" = "PCr",
"s" = "PCs",
"u" = "PCu")) %>%
rename(Type = TypePC)
utterance.type <- utterance.type.n %>%
gather(`d`,`i`, `n`, `q`, `r`, `s`, `u`,
key = "Type",
value = "n") %>%
mutate(Type = factor(Type)) %>%
dplyr::select(subj, month, Type, n) %>%
left_join(utterance.type.PC) %>%
left_join(demographics) %>%      # Combine with demographics spreadsheet
mutate(Log.n = log(n+1),
# Add a column to show which factors represent joint engagement (R, S, Q)
JE = ifelse((Type=='r'| Type=='s' | Type=='q'), T, F))
## Object presence: How much caregiver input relates to objects that are present in the infant's environment?
object.presence <- sibsdata %>%
filter(speaker %in% c("MOT", "FAT", "SIBLING"))  %>%    # Remove other speakers from data
filter(object_present %in%
c("y", "n")) %>%
group_by(subj, month, object_present) %>%
tally() %>%
spread(object_present, n) %>%
replace(is.na(.), 0) %>%
ungroup() %>%
mutate(Total = n + y,
PC = y/Total) %>%
dplyr::select(subj, month, y, PC) %>%
rename(n = y) %>%
left_join(demographics) %>%
mutate(Log.n = log(n+1))
## Speaker type
# Spread information across columns
speaker.type.n <- sibsdata %>%
group_by(subj, month, speaker) %>%
tally() %>%
spread(speaker, n) %>%
dplyr::select(-contains("TV"), -TOY) %>%
replace(is.na(.), 0) %>%
rowwise() %>%
mutate(All.speakers = sum(c_across(AF3:UNC))) %>%
ungroup() %>%
mutate(Family.input = (MOT + FAT + SIBLING)) %>%
dplyr::select(subj, month, MOT, FAT, SIBLING, Family.input, All.speakers)
speaker.type <- speaker.type.n %>%
gather(`MOT`,`FAT`, `SIBLING`,
key = "Speaker",
value = "n") %>%
left_join(demographics) %>%
mutate(Log.n = log(n+1))
# CDI data: is the word the caregiver produces deemed to be 'learnable' in early acquisition (i.e. is it on the CDI)?
# queries <- sibsdata %>%            # with updated basic_levels.feather I need to first go through and classify words that are not in the original wordlist doc
#   left_join(wordlist) %>%
#   select(-CDIform, -object) %>%
#   filter(is.na(in_cdi)) %>%
#   write_csv("cdi_queries.csv")
in.cdi <- sibsdata %>%            # create dataset that classifies each basic_level as matching or not matching CDI list in wordlist
left_join(wordlist) %>%
select(-CDIform, -object) %>%
filter(!is.na(in_cdi)) %>%               # filter these for now while wating for final basic_levels, but remove filter once queries have been sorted
group_by(subj, month, in_cdi) %>%
tally() %>%
spread(in_cdi, n) %>%
replace(is.na(.), 0) %>%
ungroup() %>%
rename(n = `TRUE`,
False = `FALSE`) %>%
mutate(Total = False + n,
PC = n/Total,
Log.n = log(n+1)) %>%
dplyr::select(subj, month, n, PC) %>%
left_join(demographics)                        # Combine with demographics data
sib.ages <- read_csv("Data/SiblingAges.csv") %>%   # Read in data showing age differences between subj and siblings
mutate(subj = factor(subj))
in.cdi <- sibsdata %>%            # create dataset that classifies each basic_level as matching or not matching CDI list in wordlist
left_join(wordlist) %>%
select(-CDIform, -object)
in.cdi %>% filter(is.na(in_cdi))
in.cdi %>% filter(is.na(in_cdi)) %>% tally()
queries <- sibsdata %>%            # with updated basic_levels.feather I need to first go through and classify words that are not in the original wordlist doc
left_join(wordlist) %>%
select(-CDIform, -object) %>%
filter(is.na(in_cdi)) %>%
write_csv("cdi_queries_Mar22.csv")
View(queries)
queries <- sibsdata %>%            # with updated basic_levels.feather I need to first go through and classify words that are not in the original wordlist doc
left_join(wordlist) %>%
select(-CDIform, -object) %>%
filter(is.na(in_cdi)) %>%
distinct(basic_level, .keep_all = TRUE) %>%
write_csv("cdi_queries_Mar22.csv")
queries <- sibsdata %>%            # with updated basic_levels.feather I need to first go through and classify words that are not in the original wordlist doc
left_join(wordlist) %>%
select(-CDIform, -object) %>%
filter(is.na(in_cdi)) %>%
distinct(basic_level, .keep_all = TRUE) %>%
write_csv("cdi_queries_Mar22.csv")
queries <- sibsdata %>%            # with updated basic_levels.feather I need to first go through and classify words that are not in the original wordlist doc
left_join(wordlist) %>%
select(-CDIform, -object) %>%
filter(is.na(in_cdi) & Speaker %in% c("MOT", "FAT", "SIBLING")) %>%
distinct(basic_level, .keep_all = TRUE) %>%
write_csv("cdi_queries_Mar22.csv")
sibsdata %>%            # with updated basic_levels.feather I need to first go through and classify words that are not in the original wordlist doc
left_join(wordlist) %>%
select(-CDIform, -object) %>%
filter(is.na(in_cdi) & speaker %in% c("MOT", "FAT", "SIBLING")) %>%
distinct(basic_level, .keep_all = TRUE)
queries <- sibsdata %>%            # with updated basic_levels.feather I need to first go through and classify words that are not in the original wordlist doc
left_join(wordlist) %>%
select(-CDIform, -object) %>%
filter(is.na(in_cdi) & speaker %in% c("MOT", "FAT", "SIBLING")) %>%
distinct(basic_level, .keep_all = TRUE) %>%
write_csv("cdi_queries_Mar22.csv")
queries <- sibsdata %>%            # with updated basic_levels.feather I need to first go through and classify words that are not in the original wordlist doc
left_join(wordlist) %>%
select(-CDIform, -object) %>%
filter(is.na(in_cdi) & speaker %in% c("MOT", "FAT", "SIBLING")) %>%
distinct(basic_level, .keep_all = TRUE) %>%
write_csv("cdi_queries_Mar22.csv")
>>>>>>> 9f2c034253858e1ae1079385033d973cc17848f1
wordlist <- read_csv("Data/in_cdi_Wordlist.csv") # Read in CDI wordlist that matches sibsdata$basic_level with words on the CDI
library(tidyverse)
library(readr)
library(feather)
library(stringi)
library(stringr)
library(forcats)
wordlist <- read_csv("Data/in_cdi_Wordlist.csv") # Read in CDI wordlist that matches sibsdata$basic_level with words on the CDI
in_cdi_queries <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
distinct(basic_level, object) %>%
left_join(wordlist, by=c("basic_level"="Word")) %>% # match words to CDI forms using the CDI_wordlist.csv spreadsheet
mutate(in_cdi = ifelse(!is.na(Form),T, F)) %>%
arrange(desc(in_cdi))
in_cdi_queries <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
distinct(basic_level, object)
View(in_cdi_queries)
View(wordlist)
in_cdi_queries <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
distinct(basic_level, object) %>%
left_join(wordlist, by=c("basic_level"="object"))
in_cdi_queries <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
distinct(basic_level, object) %>%
left_join(wordlist, by=c("basic_level"="CDIform"))
in_cdi_queries <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
distinct(basic_level, object) %>%
left_join(wordlist, by=c("basic_level"="Word"))
in_cdi_queries <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
distinct(basic_level, object) %>%
left_join(wordlist, by=c("basic_level"="object"))
in_cdi_queries <- read_csv("Data/all_basiclevel_randsubj.csv") %>%
distinct(basic_level, object)
View(in_cdi_queries)
>>>>>>> 259a69f3819966bda5cae944dc8125f004b33013
library(papaja)
library(tidyverse)
library(dplyr)
library(tibble)
library(lmerTest)
library(afex)
#library(citr)
library(feather)
source("DataGathering.R")
source("Tables.R")
stat_sum_df <- function(fun, geom="crossbar", ...) {
stat_summary(fun.data = fun, colour = "red", geom = geom, width = 0.2, ...)
}
sibnumber.model <- lmerTest::lmer(Log.Totalwords ~ Siblings6 + month + (1|subj), data=SiblingsData, REML=FALSE)
sibnumber.model.null <- lmerTest::lmer(Log.Totalwords ~ month + (1|subj), data=SiblingsData, REML=FALSE)
sibnumber_anova <- anova(sibnumber.model, sibnumber.model.null) %>%
rename("pval" = `Pr(>Chisq)`)
sibnumber_anova
summary(sibnumber.model)
# In overall vocabulary development
CDI %>% filter(month == 18) %>%
mutate(outlier = (Total.words >
(mean(Total.words, na.rm=T) +
3*(sd(Total.words, na.rm=T))) |
Total.words <
(mean(Total.words, na.rm=T) -
3*(sd(Total.words, na.rm=T))))) %>%
filter(outlier == TRUE)
# month 10: 521, 749, 342
# month 11: 521, 342
# month 13: 794
# month 14: 794
# month 15: 794
# month 16: 794
# month 17: 794
# month 18: 794
## Remove 794 from analysis
SiblingsData <- SiblingsData %>% filter(subj != 794 & !month %in% c("06", "07", "08", "09"))
CDI <- CDI %>% filter(subj != 794)
speaker.type <- speaker.type %>% filter(subj != 794 & !month %in% c("06", "07", "08", "09"))
object.presence <- object.presence %>% filter(subj != 794 & !month %in% c("06", "07", "08", "09"))
in.cdi <- in.cdi %>% filter(subj != 794 & !month %in% c("06", "07", "08", "09"))
females <- SiblingsData %>% filter(month == 18 & sex == "F") %>% tally()
source("Figures.R")
sibnumber.model <- lmerTest::lmer(Log.Totalwords ~ Siblings6 + month + (1|subj), data=SiblingsData, REML=FALSE)
sibnumber.model.null <- lmerTest::lmer(Log.Totalwords ~ month + (1|subj), data=SiblingsData, REML=FALSE)
sibnumber_anova
summary(sibnumber.model)
sibnumber.model <- lmerTest::lmer(Log.Totalwords ~ Siblings6 + as.numeric(month) + (1|subj), data=SiblingsData, REML=FALSE)
summary(sibnumber.model)
sibnumber.model.null <- lmerTest::lmer(Log.Totalwords ~ as.numeric(month) + (1|subj), data=SiblingsData, REML=FALSE)
sibnumber_anova
summary(sibnumber.model)
sibnumber.model <- lmerTest::lmer(Log.Totalwords ~ Siblings6 + month + (1|subj), data=SiblingsData, REML=FALSE)
sibnumber.model.null <- lmerTest::lmer(Log.Totalwords ~ month + (1|subj), data=SiblingsData, REML=FALSE)
sibnumber_anova <- anova(sibnumber.model, sibnumber.model.null) %>%
rename("pval" = `Pr(>Chisq)`)
summary(sibnumber.model)
sib.effect.discrete <- summary(sibnumber.model)
View(sib.effect.discrete)
sib.effect.discrete <- as.data.frame(summary(sibnumber.model))
View(siblings.model.summary.table)
View(CDI)
View(wordlist)
wordlist %>% distinct(CDIform) %>% tally()
nCDI
nCDI <- wordlist %>% distinct(CDIform) %>% tally()
nCDI
wordlist %>% filter(in_cdi == T) %>% group_by(CDIform) %>% tally()
wordlist %>% filter(in_cdi == T) %>% group_by(CDIform) %>% tally() %>% arrange(n)
wordlist %>% filter(in_cdi == T) %>% group_by(CDIform) %>% tally() %>% arrange(desc(n))
wordlist %>% filter(in_cdi == T) %>% group_by(CDIform) %>% tally() %>% arrange(n)
wordlist %>% #filter(in_cdi == T) %>%
group_by(CDIform) %>% tally() %>% arrange(n)
wordlist %>% #filter(in_cdi == T) %>%
group_by(CDIform) %>% tally() %>% arrange(desc(n))
cdi_words <- in.cdi %>% summarise(total = sum(Total),
sum_n = sum(n),
PC_cdi = sum_n/total)
cdi_words
install.packages(c("afex", "ape", "backports", "bayesplot", "bayestestR", "BBmisc", "BH", "blob", "bookdown", "brew", "brio", "brms", "Brobdingnag", "broom", "bslib", "cachem", "cAIC4", "car", "carData", "cli", "clipr", "coin", "colorspace", "colourpicker", "commonmark", "conquer", "corpcor", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "datawizard", "DBI", "dendextend", "DEoptimR", "desc", "DescTools", "devtools", "DHARMa", "diffobj", "digest", "doParallel", "dplyr", "DT", "dtplyr", "e1071", "effects", "effectsize", "emmeans", "EMT", "evaluate", "Exact", "fansi", "fdrtool", "fields", "foreach", "fs", "future", "gdtools", "generics", "geosphere", "gert", "ggeffects", "ggsignif", "git2r", "gld", "glmmTMB", "glue", "googlesheets4", "graphlayouts", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "isoband", "iterators", "jpeg", "jsonlite", "jtools", "knitr", "later", "lavaan", "libcoin", "lifecycle", "lme4", "lmerTest", "lmtest", "loo", "lubridate", "magrittr", "maps", "maptools", "matrixStats", "memoise", "mime", "multcomp", "MuMIn", "mvtnorm", "nloptr", "openssl", "openxlsx", "optimx", "packrat", "pander", "parallelly", "parameters", "pbapply", "performance", "pillar", "pkgbuild", "pkgload", "plyr", "pracma", "psych", "qgam", "qgraph", "quantreg", "quantregGrowth", "R6", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppParallel", "readr", "remotes", "reprex", "rex", "rio", "rJava", "rjson", "rlang", "rlist", "RLRsim", "rmarkdown", "RMySQL", "rngtools", "robustbase", "rootSolve", "roxygen2", "rsconnect", "rstan", "Rttf2pt1", "rvest", "sass", "sessioninfo", "sfsmisc", "shiny", "shinyjs", "shinystan", "sjmisc", "sjPlot", "sp", "spam", "stargazer", "statmod", "stringdist", "stringi", "survey", "svglite", "systemfonts", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tinylabels", "tinytex", "TMB", "usethis", "utf8", "uuid", "V8", "viridis", "waldo", "withr", "xfun", "XML", "xml2", "yaml"))
install.packages(c("afex", "ape", "backports", "bayesplot", "bayestestR", "BBmisc", "BH", "blob", "bookdown", "brew", "brio", "brms", "Brobdingnag", "broom", "bslib", "cachem", "cAIC4", "car", "carData", "cli", "clipr", "coin", "colorspace", "colourpicker", "commonmark", "conquer", "corpcor", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "datawizard", "DBI", "dendextend", "DEoptimR", "desc", "DescTools", "devtools", "DHARMa", "diffobj", "digest", "doParallel", "dplyr", "DT", "dtplyr", "e1071", "effects", "effectsize", "emmeans", "EMT", "evaluate", "Exact", "fansi", "fdrtool", "fields", "foreach", "fs", "future", "gdtools", "generics", "geosphere", "gert", "ggeffects", "ggsignif", "git2r", "gld", "glmmTMB", "glue", "googlesheets4", "graphlayouts", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "isoband", "iterators", "jpeg", "jsonlite", "jtools", "knitr", "later", "lavaan", "libcoin", "lifecycle", "lme4", "lmerTest", "lmtest", "loo", "lubridate", "magrittr", "maps", "maptools", "matrixStats", "memoise", "mime", "multcomp", "MuMIn", "mvtnorm", "nloptr", "openssl", "openxlsx", "optimx", "packrat", "pander", "parallelly", "parameters", "pbapply", "performance", "pillar", "pkgbuild", "pkgload", "plyr", "pracma", "psych", "qgam", "qgraph", "quantreg", "quantregGrowth", "R6", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppParallel", "readr", "remotes", "reprex", "rex", "rio", "rJava", "rjson", "rlang", "rlist", "RLRsim", "rmarkdown", "RMySQL", "rngtools", "robustbase", "rootSolve", "roxygen2", "rsconnect", "rstan", "Rttf2pt1", "rvest", "sass", "sessioninfo", "sfsmisc", "shiny", "shinyjs", "shinystan", "sjmisc", "sjPlot", "sp", "spam", "stargazer", "statmod", "stringdist", "stringi", "survey", "svglite", "systemfonts", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tinylabels", "tinytex", "TMB", "usethis", "utf8", "uuid", "V8", "viridis", "waldo", "withr", "xfun", "XML", "xml2", "yaml"))
install.packages(c("afex", "ape", "backports", "bayesplot", "bayestestR", "BBmisc", "BH", "blob", "bookdown", "brew", "brio", "brms", "Brobdingnag", "broom", "bslib", "cachem", "cAIC4", "car", "carData", "cli", "clipr", "coin", "colorspace", "colourpicker", "commonmark", "conquer", "corpcor", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "datawizard", "DBI", "dendextend", "DEoptimR", "desc", "DescTools", "devtools", "DHARMa", "diffobj", "digest", "doParallel", "dplyr", "DT", "dtplyr", "e1071", "effects", "effectsize", "emmeans", "EMT", "evaluate", "Exact", "fansi", "fdrtool", "fields", "foreach", "fs", "future", "gdtools", "generics", "geosphere", "gert", "ggeffects", "ggsignif", "git2r", "gld", "glmmTMB", "glue", "googlesheets4", "graphlayouts", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "isoband", "iterators", "jpeg", "jsonlite", "jtools", "knitr", "later", "lavaan", "libcoin", "lifecycle", "lme4", "lmerTest", "lmtest", "loo", "lubridate", "magrittr", "maps", "maptools", "matrixStats", "memoise", "mime", "multcomp", "MuMIn", "mvtnorm", "nloptr", "openssl", "openxlsx", "optimx", "packrat", "pander", "parallelly", "parameters", "pbapply", "performance", "pillar", "pkgbuild", "pkgload", "plyr", "pracma", "psych", "qgam", "qgraph", "quantreg", "quantregGrowth", "R6", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppParallel", "readr", "remotes", "reprex", "rex", "rio", "rJava", "rjson", "rlang", "rlist", "RLRsim", "rmarkdown", "RMySQL", "rngtools", "robustbase", "rootSolve", "roxygen2", "rsconnect", "rstan", "Rttf2pt1", "rvest", "sass", "sessioninfo", "sfsmisc", "shiny", "shinyjs", "shinystan", "sjmisc", "sjPlot", "sp", "spam", "stargazer", "statmod", "stringdist", "stringi", "survey", "svglite", "systemfonts", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tinylabels", "tinytex", "TMB", "usethis", "utf8", "uuid", "V8", "viridis", "waldo", "withr", "xfun", "XML", "xml2", "yaml"))
install.packages(c("afex", "ape", "backports", "bayesplot", "bayestestR", "BBmisc", "BH", "blob", "bookdown", "brew", "brio", "brms", "Brobdingnag", "broom", "bslib", "cachem", "cAIC4", "car", "carData", "cli", "clipr", "coin", "colorspace", "colourpicker", "commonmark", "conquer", "corpcor", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "datawizard", "DBI", "dendextend", "DEoptimR", "desc", "DescTools", "devtools", "DHARMa", "diffobj", "digest", "doParallel", "dplyr", "DT", "dtplyr", "e1071", "effects", "effectsize", "emmeans", "EMT", "evaluate", "Exact", "fansi", "fdrtool", "fields", "foreach", "fs", "future", "gdtools", "generics", "geosphere", "gert", "ggeffects", "ggsignif", "git2r", "gld", "glmmTMB", "glue", "googlesheets4", "graphlayouts", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "isoband", "iterators", "jpeg", "jsonlite", "jtools", "knitr", "later", "lavaan", "libcoin", "lifecycle", "lme4", "lmerTest", "lmtest", "loo", "lubridate", "magrittr", "maps", "maptools", "matrixStats", "memoise", "mime", "multcomp", "MuMIn", "mvtnorm", "nloptr", "openssl", "openxlsx", "optimx", "packrat", "pander", "parallelly", "parameters", "pbapply", "performance", "pillar", "pkgbuild", "pkgload", "plyr", "pracma", "psych", "qgam", "qgraph", "quantreg", "quantregGrowth", "R6", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppParallel", "readr", "remotes", "reprex", "rex", "rio", "rJava", "rjson", "rlang", "rlist", "RLRsim", "rmarkdown", "RMySQL", "rngtools", "robustbase", "rootSolve", "roxygen2", "rsconnect", "rstan", "Rttf2pt1", "rvest", "sass", "sessioninfo", "sfsmisc", "shiny", "shinyjs", "shinystan", "sjmisc", "sjPlot", "sp", "spam", "stargazer", "statmod", "stringdist", "stringi", "survey", "svglite", "systemfonts", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tinylabels", "tinytex", "TMB", "usethis", "utf8", "uuid", "V8", "viridis", "waldo", "withr", "xfun", "XML", "xml2", "yaml"))
install.packages(c("afex", "ape", "backports", "bayesplot", "bayestestR", "BBmisc", "BH", "blob", "bookdown", "brew", "brio", "brms", "Brobdingnag", "broom", "bslib", "cachem", "cAIC4", "car", "carData", "cli", "clipr", "coin", "colorspace", "colourpicker", "commonmark", "conquer", "corpcor", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "datawizard", "DBI", "dendextend", "DEoptimR", "desc", "DescTools", "devtools", "DHARMa", "diffobj", "digest", "doParallel", "dplyr", "DT", "dtplyr", "e1071", "effects", "effectsize", "emmeans", "EMT", "evaluate", "Exact", "fansi", "fdrtool", "fields", "foreach", "fs", "future", "gdtools", "generics", "geosphere", "gert", "ggeffects", "ggsignif", "git2r", "gld", "glmmTMB", "glue", "googlesheets4", "graphlayouts", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "isoband", "iterators", "jpeg", "jsonlite", "jtools", "knitr", "later", "lavaan", "libcoin", "lifecycle", "lme4", "lmerTest", "lmtest", "loo", "lubridate", "magrittr", "maps", "maptools", "matrixStats", "memoise", "mime", "multcomp", "MuMIn", "mvtnorm", "nloptr", "openssl", "openxlsx", "optimx", "packrat", "pander", "parallelly", "parameters", "pbapply", "performance", "pillar", "pkgbuild", "pkgload", "plyr", "pracma", "psych", "qgam", "qgraph", "quantreg", "quantregGrowth", "R6", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppParallel", "readr", "remotes", "reprex", "rex", "rio", "rJava", "rjson", "rlang", "rlist", "RLRsim", "rmarkdown", "RMySQL", "rngtools", "robustbase", "rootSolve", "roxygen2", "rsconnect", "rstan", "Rttf2pt1", "rvest", "sass", "sessioninfo", "sfsmisc", "shiny", "shinyjs", "shinystan", "sjmisc", "sjPlot", "sp", "spam", "stargazer", "statmod", "stringdist", "stringi", "survey", "svglite", "systemfonts", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tinylabels", "tinytex", "TMB", "usethis", "utf8", "uuid", "V8", "viridis", "waldo", "withr", "xfun", "XML", "xml2", "yaml"))
install.packages(c("afex", "ape", "backports", "bayesplot", "bayestestR", "BBmisc", "BH", "blob", "bookdown", "brew", "brio", "brms", "Brobdingnag", "broom", "bslib", "cachem", "cAIC4", "car", "carData", "cli", "clipr", "coin", "colorspace", "colourpicker", "commonmark", "conquer", "corpcor", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "datawizard", "DBI", "dendextend", "DEoptimR", "desc", "DescTools", "devtools", "DHARMa", "diffobj", "digest", "doParallel", "dplyr", "DT", "dtplyr", "e1071", "effects", "effectsize", "emmeans", "EMT", "evaluate", "Exact", "fansi", "fdrtool", "fields", "foreach", "fs", "future", "gdtools", "generics", "geosphere", "gert", "ggeffects", "ggsignif", "git2r", "gld", "glmmTMB", "glue", "googlesheets4", "graphlayouts", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "isoband", "iterators", "jpeg", "jsonlite", "jtools", "knitr", "later", "lavaan", "libcoin", "lifecycle", "lme4", "lmerTest", "lmtest", "loo", "lubridate", "magrittr", "maps", "maptools", "matrixStats", "memoise", "mime", "multcomp", "MuMIn", "mvtnorm", "nloptr", "openssl", "openxlsx", "optimx", "packrat", "pander", "parallelly", "parameters", "pbapply", "performance", "pillar", "pkgbuild", "pkgload", "plyr", "pracma", "psych", "qgam", "qgraph", "quantreg", "quantregGrowth", "R6", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppParallel", "readr", "remotes", "reprex", "rex", "rio", "rJava", "rjson", "rlang", "rlist", "RLRsim", "rmarkdown", "RMySQL", "rngtools", "robustbase", "rootSolve", "roxygen2", "rsconnect", "rstan", "Rttf2pt1", "rvest", "sass", "sessioninfo", "sfsmisc", "shiny", "shinyjs", "shinystan", "sjmisc", "sjPlot", "sp", "spam", "stargazer", "statmod", "stringdist", "stringi", "survey", "svglite", "systemfonts", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tinylabels", "tinytex", "TMB", "usethis", "utf8", "uuid", "V8", "viridis", "waldo", "withr", "xfun", "XML", "xml2", "yaml"))
install.packages(c("afex", "ape", "backports", "bayesplot", "bayestestR", "BBmisc", "BH", "blob", "bookdown", "brew", "brio", "brms", "Brobdingnag", "broom", "bslib", "cachem", "cAIC4", "car", "carData", "cli", "clipr", "coin", "colorspace", "colourpicker", "commonmark", "conquer", "corpcor", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "datawizard", "DBI", "dendextend", "DEoptimR", "desc", "DescTools", "devtools", "DHARMa", "diffobj", "digest", "doParallel", "dplyr", "DT", "dtplyr", "e1071", "effects", "effectsize", "emmeans", "EMT", "evaluate", "Exact", "fansi", "fdrtool", "fields", "foreach", "fs", "future", "gdtools", "generics", "geosphere", "gert", "ggeffects", "ggsignif", "git2r", "gld", "glmmTMB", "glue", "googlesheets4", "graphlayouts", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "isoband", "iterators", "jpeg", "jsonlite", "jtools", "knitr", "later", "lavaan", "libcoin", "lifecycle", "lme4", "lmerTest", "lmtest", "loo", "lubridate", "magrittr", "maps", "maptools", "matrixStats", "memoise", "mime", "multcomp", "MuMIn", "mvtnorm", "nloptr", "openssl", "openxlsx", "optimx", "packrat", "pander", "parallelly", "parameters", "pbapply", "performance", "pillar", "pkgbuild", "pkgload", "plyr", "pracma", "psych", "qgam", "qgraph", "quantreg", "quantregGrowth", "R6", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppParallel", "readr", "remotes", "reprex", "rex", "rio", "rJava", "rjson", "rlang", "rlist", "RLRsim", "rmarkdown", "RMySQL", "rngtools", "robustbase", "rootSolve", "roxygen2", "rsconnect", "rstan", "Rttf2pt1", "rvest", "sass", "sessioninfo", "sfsmisc", "shiny", "shinyjs", "shinystan", "sjmisc", "sjPlot", "sp", "spam", "stargazer", "statmod", "stringdist", "stringi", "survey", "svglite", "systemfonts", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tinylabels", "tinytex", "TMB", "usethis", "utf8", "uuid", "V8", "viridis", "waldo", "withr", "xfun", "XML", "xml2", "yaml"))
install.packages(c("afex", "ape", "backports", "bayesplot", "bayestestR", "BBmisc", "BH", "blob", "bookdown", "brew", "brio", "brms", "Brobdingnag", "broom", "bslib", "cachem", "cAIC4", "car", "carData", "cli", "clipr", "coin", "colorspace", "colourpicker", "commonmark", "conquer", "corpcor", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "datawizard", "DBI", "dendextend", "DEoptimR", "desc", "DescTools", "devtools", "DHARMa", "diffobj", "digest", "doParallel", "dplyr", "DT", "dtplyr", "e1071", "effects", "effectsize", "emmeans", "EMT", "evaluate", "Exact", "fansi", "fdrtool", "fields", "foreach", "fs", "future", "gdtools", "generics", "geosphere", "gert", "ggeffects", "ggsignif", "git2r", "gld", "glmmTMB", "glue", "googlesheets4", "graphlayouts", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "isoband", "iterators", "jpeg", "jsonlite", "jtools", "knitr", "later", "lavaan", "libcoin", "lifecycle", "lme4", "lmerTest", "lmtest", "loo", "lubridate", "magrittr", "maps", "maptools", "matrixStats", "memoise", "mime", "multcomp", "MuMIn", "mvtnorm", "nloptr", "openssl", "openxlsx", "optimx", "packrat", "pander", "parallelly", "parameters", "pbapply", "performance", "pillar", "pkgbuild", "pkgload", "plyr", "pracma", "psych", "qgam", "qgraph", "quantreg", "quantregGrowth", "R6", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppParallel", "readr", "remotes", "reprex", "rex", "rio", "rJava", "rjson", "rlang", "rlist", "RLRsim", "rmarkdown", "RMySQL", "rngtools", "robustbase", "rootSolve", "roxygen2", "rsconnect", "rstan", "Rttf2pt1", "rvest", "sass", "sessioninfo", "sfsmisc", "shiny", "shinyjs", "shinystan", "sjmisc", "sjPlot", "sp", "spam", "stargazer", "statmod", "stringdist", "stringi", "survey", "svglite", "systemfonts", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tinylabels", "tinytex", "TMB", "usethis", "utf8", "uuid", "V8", "viridis", "waldo", "withr", "xfun", "XML", "xml2", "yaml"))
install.packages(c("afex", "ape", "backports", "bayesplot", "bayestestR", "BBmisc", "BH", "blob", "bookdown", "brew", "brio", "brms", "Brobdingnag", "broom", "bslib", "cachem", "cAIC4", "car", "carData", "cli", "clipr", "coin", "colorspace", "colourpicker", "commonmark", "conquer", "corpcor", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "datawizard", "DBI", "dendextend", "DEoptimR", "desc", "DescTools", "devtools", "DHARMa", "diffobj", "digest", "doParallel", "dplyr", "DT", "dtplyr", "e1071", "effects", "effectsize", "emmeans", "EMT", "evaluate", "Exact", "fansi", "fdrtool", "fields", "foreach", "fs", "future", "gdtools", "generics", "geosphere", "gert", "ggeffects", "ggsignif", "git2r", "gld", "glmmTMB", "glue", "googlesheets4", "graphlayouts", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "isoband", "iterators", "jpeg", "jsonlite", "jtools", "knitr", "later", "lavaan", "libcoin", "lifecycle", "lme4", "lmerTest", "lmtest", "loo", "lubridate", "magrittr", "maps", "maptools", "matrixStats", "memoise", "mime", "multcomp", "MuMIn", "mvtnorm", "nloptr", "openssl", "openxlsx", "optimx", "packrat", "pander", "parallelly", "parameters", "pbapply", "performance", "pillar", "pkgbuild", "pkgload", "plyr", "pracma", "psych", "qgam", "qgraph", "quantreg", "quantregGrowth", "R6", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppParallel", "readr", "remotes", "reprex", "rex", "rio", "rJava", "rjson", "rlang", "rlist", "RLRsim", "rmarkdown", "RMySQL", "rngtools", "robustbase", "rootSolve", "roxygen2", "rsconnect", "rstan", "Rttf2pt1", "rvest", "sass", "sessioninfo", "sfsmisc", "shiny", "shinyjs", "shinystan", "sjmisc", "sjPlot", "sp", "spam", "stargazer", "statmod", "stringdist", "stringi", "survey", "svglite", "systemfonts", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tinylabels", "tinytex", "TMB", "usethis", "utf8", "uuid", "V8", "viridis", "waldo", "withr", "xfun", "XML", "xml2", "yaml"))
detach(package:papaja, unload = TRUE)
install.packages("papaja")
library(tidyverse)
library(dplyr)
library(tibble)
library(lmerTest)
library(afex)
library(citr)
source("DataGathering.R")
knitr::opts_chunk$set(echo = TRUE)
sibgroup.summary <- SiblingsData %>% filter(month==18) %>%
group_by(SibGroup6) %>%
summarise(mean = mean(Total.words, na.rm=T),
sd = sd(Total.words, na.rm=T)) %>%
mutate(Variable = "Productive Vocabulary 18m") %>%
select(Variable, SibGroup6, mean, sd)
library(tidyverse)
library(dplyr)
library(tibble)
library(lmerTest)
library(afex)
library(citr)
source("DataGathering.R")
library(tidyverse)
library(dplyr)
library(tibble)
library(lmerTest)
library(afex)
library(citr)
source("DataGathering.R")
library(tidyverse)
library(dplyr)
library(tibble)
library(lmerTest)
library(afex)
library(citr)
source("DataGathering.R")
knitr::opts_chunk$set(echo = TRUE)
sibgroup.summary <- SiblingsData %>% filter(month==18) %>%
group_by(SibGroup6) %>%
summarise(mean = mean(Total.words, na.rm=T),
sd = sd(Total.words, na.rm=T)) %>%
mutate(Variable = "Productive Vocabulary 18m") %>%
select(Variable, SibGroup6, mean, sd)
View(sibgroup.summary)
sibnumber.model <- lmerTest::lmer(Log.Totalwords ~ Siblings6 + month + (1|subj), data=SiblingsData, REML=FALSE)
sibnumber.model.null <- lmerTest::lmer(Log.Totalwords ~ month + (1|subj), data=SiblingsData, REML=FALSE)
anova(sibnumber.model, sibnumber.model.null)
wilcox.test(
x = subset(SiblingsData, month == 18 & Siblings6 == "0")$Total.words
, y = subset(SiblingsData, month == 18 & Siblings6 == "1")$Total.words
, paired = FALSE
) # NS
wilcox.test(
x = subset(SiblingsData, month == 18 & Siblings6 == "1")$Total.words
, y = subset(SiblingsData, month == 18 & Siblings6 == "2")$Total.words
, paired = FALSE
) # p=.06
wilcox.test(
x = subset(SiblingsData, month == 18 & Siblings6 == "2")$Total.words
, y = subset(SiblingsData, month == 18 & Siblings6 == "3")$Total.words
, paired = FALSE
) # p=.2
wilcox.test(
x = subset(SiblingsData, month == 18 & Siblings6 == "3")$Total.words
, y = subset(SiblingsData, month == 18 & Siblings6 == "4")$Total.words
, paired = FALSE
) # p=.4
summary(sibnumber.model)
speaker.type.model <- lmerTest::lmer(Log.n ~ Siblings6 + (1|subj), data=speaker.type, REML=FALSE)
speaker.type.model.null <- lmerTest::lmer(Log.n ~ (1|subj), data=speaker.type, REML=FALSE)
anova(speaker.type.model, speaker.type.model.null) # ns
speaker.type.model <- lmerTest::lmer(Log.n ~ Siblings6 + Speaker + (1|subj), data=speaker.type, REML=FALSE)
speaker.type.model.null <- lmerTest::lmer(Log.n ~ Speaker + (1|subj), data=speaker.type, REML=FALSE)
anova(speaker.type.model, speaker.type.model.null) # ns
speaker.type.SIB_wilcox_none_one <- wilcox.test(
x = subset(speaker.type.SIB, SibGroup6 == "None")$MeanN
, y = subset(speaker.type.SIB, SibGroup6 == "One")$MeanN
, paired = FALSE
) # p<.001
speaker.type.SIB <- speaker.type %>% group_by(subj) %>%
filter(Speaker == "SIBLING") %>%
mutate(MeanN = mean(n),
TotalN = sum(n)) %>%
filter(month == 17)
speaker.type.SIB_wilcox_none_one <- wilcox.test(
x = subset(speaker.type.SIB, SibGroup6 == "None")$MeanN
, y = subset(speaker.type.SIB, SibGroup6 == "One")$MeanN
, paired = FALSE
) # p<.001
wilcox.test(
x = subset(speaker.type.SIB, SibGroup6 == "None")$MeanN
, y = subset(speaker.type.SIB, SibGroup6 == "One")$MeanN
, paired = FALSE
) # p<.001
wilcox.test(
x = subset(speaker.type.SIB, SibGroup6 == "2+")$MeanN
, y = subset(speaker.type.SIB, SibGroup6 == "One")$MeanN
, paired = FALSE
) # NS
speaker.type.MOT <- speaker.type %>% group_by(subj) %>%
filter(Speaker == "MOT") %>%
mutate(MeanN = mean(n))  %>%
filter(month == 17)
wilcox.test(
x = subset(speaker.type.SIB, SibGroup6 == "None")$MeanN
, y = subset(speaker.type.SIB, SibGroup6 == "One")$MeanN
, paired = FALSE
) # NS
wilcox.test(
x = subset(speaker.type.SIB, Siblings6 == "2")$MeanN
, y = subset(speaker.type.SIB, Siblings6 == "1")$MeanN
, paired = FALSE
) # p<.01
wilcox.test(
x = subset(speaker.type.SIB, Siblings6 == "2")$MeanN
, y = subset(speaker.type.SIB, Siblings6 == "3")$MeanN
, paired = FALSE
) # NS
wilcox.test(
x = subset(speaker.type.SIB, Siblings6 == "3")$MeanN
, y = subset(speaker.type.SIB, Siblings6 == "4")$MeanN
, paired = FALSE
) # NS
speaker.type.MOT <- speaker.type %>% group_by(subj) %>%
filter(Speaker == "MOT") %>%
mutate(MeanN = mean(n))  %>%
filter(month == 17)
wilcox.test(
x = subset(speaker.type.SIB, Siblings6 == "0")$MeanN
, y = subset(speaker.type.SIB, Siblings6 == "1")$MeanN
, paired = FALSE
) # p<.001
speaker.type.MOT_wilcox_none_one <- wilcox.test(
x = subset(speaker.type.MOT, Siblings6 == "0")$MeanN
, y = subset(speaker.type.MOT, Siblings6 == "1")$MeanN
, paired = FALSE
) # NS
wilcox.test(
x = subset(speaker.type.MOT, Siblings6 == "0")$MeanN
, y = subset(speaker.type.MOT, Siblings6 == "1")$MeanN
, paired = FALSE
) # NS
wilcox.test(
x = subset(speaker.type.MOT, Siblings6 == "2")$MeanN
, y = subset(speaker.type.MOT, Siblings6 == "1")$MeanN
, paired = FALSE
) # p<.01
wilcox.test(
x = subset(speaker.type.MOT, Siblings6 == "2")$MeanN
, y = subset(speaker.type.MOT, Siblings6 == "3")$MeanN
, paired = FALSE
) # NS
wilcox.test(
x = subset(speaker.type.MOT, Siblings6 == "3")$MeanN
, y = subset(speaker.type.MOT, Siblings6 == "4")$MeanN
, paired = FALSE
) # NS
in.cdi.summary <- in.cdi %>% group_by(Siblings6, subj) %>%
summarize(meanPC = mean(PC),
medPC = median(PC),
sdPC = sd(PC))
in.cdi.model <- lmerTest::lmer(PC ~ Siblings6 + month + (1|subj), data=in.cdi, REML=FALSE)
in.cdi.model.null <- lmerTest::lmer(PC ~ month + (1|subj), data=in.cdi, REML=FALSE)
anova(in.cdi.model, in.cdi.model.null) p=.054
anova(in.cdi.model, in.cdi.model.null) #p=.054
wilcox.test(
x = subset(in.cdi.summary, Siblings6 == "0")$meanPC
, y = subset(in.cdi.summary, Siblings6 == "1")$meanPC
, paired = FALSE
) # NS
wilcox.test(
x = subset(in.cdi.summary, Siblings6 == "2")$meanPC
, y = subset(in.cdi.summary, Siblings6 == "1")$meanPC
, paired = FALSE
) # p=.002
wilcox.test(
x = subset(in.cdi.summary, Siblings6 == "2")$meanPC
, y = subset(in.cdi.summary, Siblings6 == "3")$meanPC
, paired = FALSE
) # NS
wilcox.test(
x = subset(in.cdi.summary, Siblings6 == "2")$meanPC
, y = subset(in.cdi.summary, Siblings6 == "1")$meanPC
, paired = FALSE
) # NS
wilcox.test(
x = subset(in.cdi.summary, Siblings6 == "2")$meanPC
, y = subset(in.cdi.summary, Siblings6 == "3")$meanPC
, paired = FALSE
) # NS
wilcox.test(
x = subset(in.cdi.summary, Siblings6 == "3")$meanPC
, y = subset(in.cdi.summary, Siblings6 == "4")$meanPC
, paired = FALSE
) # p=.33
object.presence.summary <- object.presence %>%
group_by(subj, Siblings6) %>%
summarise(mean.object = mean(PC),
sd.object = sd(PC),
med.object = median(PC))
object.presence.model <- lmerTest::lmer(PC ~ Siblings6 + month + (1|subj), data=object.presence, REML=FALSE)
object.presence.model.null <- lmerTest::lmer(PC ~ month + (1|subj), data=object.presence, REML=FALSE)
anova(object.presence.model, object.presence.model.null) # p<.001
wilcox.test(
x = subset(object.presence.summary, Siblings6 == "0")$mean.object
, y = subset(object.presence.summary, Siblings6 == "1")$mean.object
, paired = FALSE
) # p<.001
wilcox.test(
x = subset(object.presence.summary, Siblings6 == "2")$mean.object
, y = subset(object.presence.summary, Siblings6 == "1")$mean.object
, paired = FALSE
) # p=.056
wilcox.test(
x = subset(object.presence.summary, Siblings6 == "2")$mean.object
, y = subset(object.presence.summary, Siblings6 == "1")$mean.object
, paired = FALSE
) # p<.05
wilcox.test(
x = subset(object.presence.summary, Siblings6 == "2")$mean.object
, y = subset(object.presence.summary, Siblings6 == "3")$mean.object
, paired = FALSE
) # NS
wilcox.test(
x = subset(object.presence.summary, Siblings6 == "3")$mean.object
, y = subset(object.presence.summary, Siblings6 == "4")$mean.object
, paired = FALSE
) # NS
